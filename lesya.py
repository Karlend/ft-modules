"""LesyaBot automation"""

# pylint: disable=relative-beyond-top-level, invalid-name, missing-class-docstring, missing-function-docstring, too-many-instance-attributes
# ^^ –¥–∞ –ø–æ—à–µ–ª —ç—Ç–æ—Ç –ø–∞–π–ª–∏–Ω—Ç –Ω–∞—Ö—É–π, —è –ª—É—á—à–µ –∑–Ω–∞—é –∫–∞–∫ –ø–∏—Å–∞—Ç—å –º–æ–π –∫–æ–¥

# –í–æ–æ–±—â–µ–º –∫–æ—Ä–æ—Ç–∫–æ –æ —Ç–æ–º –∫–∞–∫ —Ç—É—Ç –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç.
# –í–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å (–∫–æ–¥, —Ñ–∞–π–ª) –¥–µ–ª–∏—Ç—Å—è –Ω–∞ —Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —á–∞—Å—Ç–∏: –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –ø–∞—Ä—Å–µ—Ä, –∏ —Ö—ç–Ω–¥–ª–µ—Ä—ã.
#
# –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä - —à—Ç—É–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–∞ –≤—ã—Ö–æ–¥–µ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —ç—Ç–æ –∑–∞
# —Å–æ–æ–±—â–µ–Ω–∏–µ. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ –∫–ª–∞—Å—Å–µ LesyaClassifier. –º–µ—Ç–æ–¥ classify_message –Ω–∞ –≤—Ö–æ–¥
# –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –Ω–∞ –≤—ã—Ö–æ–¥–µ –æ—Ç–¥–∞—ë—Ç –µ–≥–æ —Ç–∏–ø. –ö—Å—Ç–∞—Ç–µ, –≤—Å–µ —Ç–∏–ø—ã –æ–ø–∏—Å–∞–Ω—ã –≤ Enum –∫–ª–∞—Å—Å–µ
# MessageType. –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä? –ü–æ–ª—É—á–∏–≤ —Ç–µ–∫—Å—Ç, –æ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—Å—è –ø–æ —Ç–∞–±–ª–∏—Ü–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏,
# –ø–æ–æ—á–µ—Ä—ë–¥–Ω–æ –ø—Ä–∏–º–µ–Ω—è—è –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ –Ω–µ—ë –Ω–∞ —Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –∏–∑ –ø—Ä–∞–≤–∏–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–æ—Å—å,
# –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–µ—Ä–Ω—ë—Ç —Ç–∏–ø, —Å –∫–æ—Ç–æ—Ä—ã–º —ç—Ç–æ –ø—Ä–∞–≤–∏–ª–æ —Å–≤—è–∑–∞–Ω–æ.
# –ù—É, –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, —É –Ω–∞—Å –µ—Å—Ç—å —Ç–µ–∫—Å—Ç:
#   üÉè Joker, –í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üò©
#   üêâ –í—ã –Ω–∞—à–ª–∏ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è –∫–ª–∞–Ω–æ–≤–æ–π –≤–æ–π–Ω—ã: ¬´–ù–µ—Å—Å–∏¬ª!
#
# –ï—Å–ª–∏ –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω–∏–≤ –∫ —Ç–µ–∫—Å—Ç—É .lower()),
# —Ç–æ –æ–Ω –Ω–∞—á–Ω—ë—Ç –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–∞–±–ª–∏—Ü–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏. –†–∞–Ω–æ –∏–ª–∏ –ø–æ–∑–¥–Ω–æ –æ–Ω –¥–æ–π–¥—ë—Ç –¥–æ –ø—Ä–∞–≤–∏–ª–∞:
#   MessageType.AutoFight_Continue: ("–≤–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏", "–≤–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã –ø–æ–±–µ–¥–∏–ª–∏")
# –û–Ω –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ—Ç –æ—Ç—Å—é–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–µ (—Ç–æ —á—Ç–æ –ø–µ—Ä–µ–¥ –¥–≤–æ–µ—Ç–æ—á–∏–µ–º - –∫–ª—é—á, –ø–æ—Å–ª–µ - –∑–Ω–∞—á–µ–Ω–∏–µ), –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç
# –µ–≥–æ. –ë—É–∫–≤–∞–ª—å–Ω–æ, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–¥:
#   if "–≤–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏" in text or "–≤–∞—à–∏ –ø–∏—Ç–æ–º–Ω—Ü—ã –ø–æ–±–µ–¥–∏–ª–∏" in text:
#	   return MessageType.AutoFight_Continue
#
# –¢–∞–∫ –∫–∞–∫ –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∞–¥–∞–µ—Ç –ø–æ–¥ –æ–¥–Ω—É –∏–∑ —á–∞—Å—Ç–µ–π –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞, –∞ –∏–º–µ–Ω–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
# "–≤–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏", —Ç–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–µ—Ä–Ω—ë—Ç MessageType.AutoFight_Continue, –∫–∞–∫ –∏ –∑–∞–ø–∏—Å–∞–Ω–æ
# –≤ —Ç–∞–±–ª–∏—Ü–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.
#
# –¢–µ–ø–µ—Ä—å, –æ —Ñ–æ—Ä–º–∞—Ç–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–∞–≤–∏–ª.
#
# –ü—Ä–∞–≤–∏–ª–∞ –º–æ–≥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ tuple, —Ç–æ–µ—Å—Ç—å ("–∞", "–±", "–≤"). –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –≤ —Ç–µ–∫—Å—Ç–µ –¥–æ–ª–∂–Ω–æ
# —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –õ–ò–ë–û "–∞" –õ–ò–ë–û "–±" –õ–ò–ë–û "–≤".
#
# –î–∞–ª–µ–µ, –ø—Ä–∞–≤–∏–ª–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π, —Ç–æ–µ—Å—Ç—å "–∞–±–≤" (–≤ –∫–æ–¥–µ —ç—Ç–æ –∑–∞–ø–∏—Å–∞–Ω–æ –∫–∞–∫ ("–∞–±–≤"), –Ω–æ –≤
# –ø–∏—Ç–æ–Ω–µ —ç—Ç–∏ —Å–∫–æ–±–∫–∏ –Ω–µ–∑–Ω–∞—á—É—â–∏–µ, –ø–æ —ç—Ç–æ–º—É —Ä–∞–∑–Ω–∏—Ü—ã –∏ –Ω–µ—Ç. –∑–∞–ø–∏—Å–∞–Ω–æ —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è).
# –ó–Ω–∞—á–∏—Ç —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å, —á—Ç–æ "–∞–±–≤" –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –≤ —Ç–µ–∫—Å—Ç–µ.
#
# –ü–æ—Å–ª–µ–¥–Ω–µ–µ - –ª—è–º–±–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏. –õ—è–º–±–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏ (–ø–æ—á–∏—Ç–∞—Ç—å –æ –Ω–∏—Ö –º–æ–∂–Ω–æ
# —Ç—É—Ç https://www.w3schools.com/python/python_lambda.asp) —ç—Ç–æ –±–æ–ª–µ–µ —É–º–Ω—ã–µ –º–∞–ª–µ–Ω—å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è
# –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–µ–≥–æ-—Ç–æ –≤ —Ç–µ–∫—Å—Ç–µ. –õ—è–º–±–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True –∏–ª–∏ False. –î–ª—è
# –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–Ω–∏–º–∞–Ω–∏—è, —Ç—É–¥–∞ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤—Å—ë, —á—Ç–æ –ø–∏—à–µ—Ç—Å—è –≤ —É—Å–ª–æ–≤–∏—è—Ö –∏—Ñ–∞. –ù–∞–ø—Ä–∏–º–µ—Ä:
#   lambda text: "—Å–ª–∞–≤–∞" in text and "—É–∫—Ä–∞—ó–Ω—ñ" in text
#
# –û—á–µ–≤–∏–¥–Ω–æ, —á—Ç–æ –ø—Ä–∞–≤–∏–ª–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ —Ç–æ–≥–æ —á—Ç–æ –æ–±–µ —Å—Ç—Ä–æ–∫–∏ –µ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ.
# –¢–∞–∫ –∂–µ, –º–æ–∂–Ω–æ –≤ –ª—è–º–±–¥–∞ —Ñ—É–Ω–∫—Ü–∏—è—Ö –ø–æ–ª—É—á–∏—Ç—å stats. –î–ª—è —î—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä:
#   lambda text, stats: stats.get("need_to_buy") and "–ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è" in text
#
# P.S. –í –∫–æ–¥–µ –ª—è–º–±–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–∞–∫ –∂–µ –≤–∑—è—Ç—ã –≤ –∫—Ä—É–≥–ª—ã–µ —Å–∫–æ–±–∫–∏, –Ω–æ –º–æ–∂–Ω–æ –∏—Ö –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å. –û–ø—è—Ç—å
# –∂–µ, –æ–Ω–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞—á–∞—Ç –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ø—Ä–æ—Å—Ç–æ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã.
#
#
#
# –°–ª–µ–¥—É—é—â–∞—è –≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å - –ü–∞—Ä—Å–µ—Ä. –¢—É—Ç –æ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –∫–ª–∞—Å—Å–µ LesyaParser. –ü—Ä–æ –Ω–µ–≥–æ –º–æ–∂–Ω–æ –¥–æ–ª–≥–æ
# –Ω–µ –±–æ–ª—Ç–∞—Ç—å, –∏–±–æ, —è –¥—É–º–∞—é, —Ç—É—Ç –≤—Å—ë –∏ —Ç–∞–∫ –ø–æ–Ω—è—Ç–Ω–æ. –°–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å—è–∫–æ–π
# —Ñ–∏–≥–Ω–∏. –ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–∞–º–æ–º –∫–æ–¥–µ.
#
#
# –î–∞–ª–µ–µ - –•—ç–Ω–¥–ª–µ—Ä—ã. –£–∂–µ —ç—Ç–∏—Ö —Ä–µ–±—è—Ç –≤—ã–∑—ã–≤–∞–µ—Ç –º–æ–¥—É–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ—ã, –∫–æ—Ç–æ—Ä—É—é –æ–Ω –ø–æ–ª—É—á–∏–ª –∏–∑
# –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞. –•—ç–Ω–¥–ª–µ—Ä—ã —Ä–∞–∑–±–∏—Ç—ã –Ω–∞ –Ω–µ–∫–∏–µ –º–æ–¥—É–ª–∏, –¥–∞–±—ã –ø—Ä–æ—â–µ –ø–æ–Ω–∏–º–∞—Ç—å —á—Ç–æ –∫ —á–µ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è.
# –ö–∞–∫ –≥–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å (—Ç–æ—Ç –∫–æ—Ç–æ—Ä—ã–π LesyaMod, –¥–∞–ª–µ–µ –±—É–¥—É –Ω–∞–∑—ã–≤–∞—Ç—å –µ–≥–æ —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä–æ–º, —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å
# —Å –ø–æ–¥–º–æ–¥—É–ª—è–º–∏-—Ö—ç–Ω–¥–ª–µ—Ä–∞–º–∏ (–∞ –æ–Ω–∏ –¥–∞–ª–µ–µ - –º–æ–¥—É–ª–∏)) –ø–æ–Ω–∏–º–∞–µ—Ç –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ —Ö—ç–Ω–¥–ª–µ—Ä –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å?
# –£ –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç __map__. –¢—É–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª–∞, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä –±—É–¥–µ—Ç
# –≤—ã–±–∏—Ä–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è. –í–ø—Ä–∏–Ω—Ü–∏–ø–µ –≤—Å—è —Ä–∞–±–æ—Ç–∞ —Å __map__ —Ä–∞—Å–ø–∏—Å–∞–Ω–∞ –≤ –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥–∞—Ö –∫
# BaseHandler, –Ω–æ —è –ø—Ä–∏–≤–µ–¥—É —Ç—É—Ç –Ω–µ–∫–æ—Ç–æ—Ä—É—é –∏–Ω—Ñ—É. –í –∫–ª—é—á –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∏–º—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö. –í
# –∫–ª—é—á –º–æ–∂–Ω–æ –ø–∏—Ö–Ω—É—Ç—å –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏–º—è, –∞ –∏–º—è —Å–æ –∑–≤—ë–∑–¥–æ—á–∫–æ–π. –Ω–∞–ø—Ä–∏–º–µ—Ä AutoFight_* –∑–Ω–∞—á–∏—Ç –ª—é–±–æ–π –∏–≤–µ–Ω—Ç,
# –∏–º—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ AutoFight_* (–Ω—É —Ç–æ–µ—Å—Ç—å AutoFight_Continue, AutoFight_Waiting, –∏ —Ç.–¥).
# –ê –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ –∂–µ, —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏-—á–ª–µ–Ω–∞ –∫–ª–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å
# —ç—Ç–æ—Ç —Å–∞–º—ã–π –∏–≤–µ–Ω—Ç. –ì–ª–∞–≤–Ω–æ–µ –Ω–µ –∑–∞–±—ã—Ç—å, —á—Ç–æ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, –∞ –Ω–µ –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ
# —Ñ—É–Ω–∫—Ü–∏—é, –∏–±–æ self –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≥–¥–µ –ø–∏—à–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª–æ __map__ –Ω–∏–∫–∞–∫–æ–≥–æ –Ω–µ—Ç.
#
#
# –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–∏ –∫–æ–¥–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–æ –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã, –ø–æ —ç—Ç–æ–º—É, –≤ —Ü–µ–ª–æ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—Å—ë
# –ø–æ–Ω—è—Ç–Ω–æ


import asyncio
import logging
from dataclasses import dataclass
from enum import Enum
from io import BytesIO
from types import FunctionType

from math import floor
from random import randint, choice
from datetime import timedelta
from time import time, strftime

from telethon import types

from .. import loader, utils


logger = logging.getLogger("LesyaAuto")


# –ø–∞—Ä–æ—á–∫–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
LESYA_CHATID = 757724042  # —á–∞—Ç —Å –±–æ—Ç–æ–º
LOGCHANNEL_CHATID = 1462806544  # —á–∞—Ç, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å—è–∫–∏–µ –ª–æ–≥–∏
LESYA_LAG = 0
humanizer_phrases = [
	"–ö–ª–∞–Ω",
	"–ö–≤",
	"–ì–æ—Ä–æ–¥",
	"–ì–æ—Ä–æ–¥ —Å—Ç–∞—Ç",
	"–ì–æ—Ä–æ–¥ —Å–∫–ª–∞–¥ –ø—Ä–æ–¥–∞—Ç—å",
	"–ì–æ—Ä–æ–¥ –±–∞–Ω–∫ —Å–Ω—è—Ç—å –≤—Å–µ",
	"–ë–∞–ª–∞–Ω—Å",
	"–ë–∞–Ω–∫",
	"–ü–∏—Ç–æ–º—Ü—ã",
	"–ö–µ–π—Å—ã",
	"–ö—É—Ä—Å",
	"–†–µ–π—Ç–∏–Ω–≥",
	"–ö–ª–∞–Ω—ã",
	"–ê–Ω–µ–∫–¥–æ—Ç",
	"–ü–†–ò–ú–ï–†",
	"–ö–∞–∑–∏–Ω–æ 1000",
	"–°—Ç–∞–∫–∞–Ω 1 1000",
	"–°—Ç–∞–∫–∞–Ω 2 1000",
	"–°—Ç–∞–∫–∞–Ω 3 1000",
	"–ó–∞–≥–∞–¥–∫–∞",
	"–°–¥–∞—é—Å—å",
	"–ë–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å 1 –≤—Å–µ",
	"–ë–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å 2 –≤—Å–µ",
	"‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
	"üíé –û—Å–Ω–æ–≤–Ω–æ–µ",
	"üìí –ü—Ä–æ—Ñ–∏–ª—å",
	"üí≤ –ë–∞–ª–∞–Ω—Å",
	"üëë –†–µ–π—Ç–∏–Ω–≥",
	"üõç –ú–∞–≥–∞–∑–∏–Ω",
	"‚óÄÔ∏è –í —Ä–∞–∑–¥–µ–ª ¬´–û—Å–Ω–æ–≤–Ω–æ–µ¬ª",
	"üèÜ –¢–æ–ø",
	"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
	"üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
	"üöÄ –ò–≥—Ä—ã",
	"‚ùì –ü–æ–º–æ—â—å",
	"üõ° –ö–ª–∞–Ω—ã",
	"üêπ –ü–∏—Ç–æ–º—Ü—ã",
	"üí∞ –ö–æ–º–∞–Ω–¥—ã –±–∞–Ω–∫–∞",
	"üåÜ –ú–æ–π –≥–æ—Ä–æ–¥",
	"üíº –ë–∏–∑–Ω–µ—Å",
	"‚õè –†—É–¥–Ω–∏–∫",
	"üì¶ –ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞",
	"üëî –†–∞–±–æ—Ç–∞",
	"üì¶ –ö–µ–π—Å—ã"
]

COOLDOWNS = {  # –∫—Ç–æ —Ç—É—Ç –¥–∞—É–Ω —è —Ç–∞–∫ –∏ –Ω–µ –ø–æ–Ω—è–ª
	"bonus": 60,

	"work": 10,
	"fight": 5,

	"opencase": 60,

	"trade": 5,
	"cup": 5,
	"casino": 5,

	"humanizer": 1800,

	"etc": 10,
}

BITCOIN_FARM_PRICE = 900000000

allowed_commands = [  # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∫–æ–Ω—Ñ—ã
	"–ø—Ä–æ—Ñ–∏–ª—å",
	"–±–∞–ª–∞–Ω—Å",
	"–±–∞–Ω–∫",

	"–≥–µ—Ç",

	"–∫–ª–∞–Ω—ã",
	"–∫–ª–∞–Ω",
	"–∫–ª–∞–Ω –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å *",

	"–≥–æ—Ä–æ–¥",
	"–≥–æ—Ä–æ–¥ —Å–∫–ª–∞–¥ –ø—Ä–æ–¥–∞—Ç—å",
	"–≥–æ—Ä–æ–¥ –∫–∞–∑–Ω–∞ —Å–Ω—è—Ç—å",

	"–∫–≤",
	"–∫–≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏",

	"–æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ",
	"–æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏"
]

best_settings = {
	"fight": True,
	"work": True,
	"bonus": True,
	"opencase": True,
	"progress": True,
	"pet_bitcoin": True,
	# "pet_stimulator": True,
	# "pet_food": True,
	# "pet_cases": True,
	"clan_buy": True,
	"humanizer": True
}

settings_tip = {
	"fight": "ü§∫ –ë–æ–π",
	"work": "üëî –†–∞–±–æ—Ç–∞",
	"bonus": "üîî –ë–æ–Ω—É—Å",

	"opencase": "üß≥ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–æ–≤",

	"progress": "üöß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–∫—É–ø—ã",

	"pet_bitcoin": "üÖ±Ô∏è –°–±–æ—Ä –±–∏—Ç–∫–æ–∏–Ω–æ–≤ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π",
	"pet_stimulator": "üíä –°—Ç–∏–º—É–ª—è—Ç–æ—Ä –ø–∏—Ç–æ–º—Ü–µ–≤",
	"pet_food": "ü•´ –ö–æ—Ä–º –ø–∏—Ç–æ–º—Ü–µ–≤",
	"pet_cases": "üíº –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫–µ–π—Å–æ–≤ –ø–∏—Ç–æ–º—Ü–µ–≤",
	# "pet_helper": "üìë –†–∞—Å—á—ë—Ç –ª—É—á—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞",

	"clan_war": "‚öîÔ∏è –ö–ª–∞–Ω–æ–≤—ã–µ –≤–æ–π–Ω—ã",
	"clan_heist": "üî´ –û–≥—Ä–∞–±–ª–µ–Ω–∏–µ",
	"clan_buy": "üí∏ –ó–∞–∫—É–ø –¥–ª—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è",

	"auto_trade": "üîß –¢—Ä–µ–π–¥ –Ω–∞ –≤—Å—ë",
	"auto_cup": "ü•§ –°—Ç–∞–∫–∞–Ω –Ω–∞ –≤—Å—ë",
	"auto_casino": "üé∞ –ö–∞–∑–∏–Ω–æ –Ω–∞ –≤—Å—ë",

	"humanizer": "üó£Ô∏è –†–∞–Ω–¥–æ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É"
}

cooldowns_hints = {
	"bonus": "üîî –ë–æ–Ω—É—Å",

	"work": "üëî –†–∞–±–æ—Ç–∞",
	"fight": "ü§∫ –ë–æ–∏",

	"opencase": "üß≥ –ú–µ–∂–¥—É –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –∫–µ–π—Å–æ–≤",

	"trade": "üîß –ê–≤—Ç–æ-—Ç—Ä–µ–π–¥",
	"cup": "ü•§ –ê–≤—Ç–æ-—Å—Ç–∞–∫–∞–Ω",
	"casino": "üé∞ –ê–≤—Ç–æ-—Å–∞–∑–∏–Ω–æ",

	"humanizer": "üó£Ô∏è –†–∞–Ω–¥–æ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É",

	"bot_lag": "üö® –ï—Å–ª–∏ –±–æ—Ç –ª–∞–≥–∞–µ—Ç –∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è",

	"etc": "üìù –û—Å—Ç–∞–ª—å–Ω–æ–µ"
}

settings_phrases = {
	"captcha_pidors": "–†–µ–ø–æ—Ä—Ç —É –º–µ–Ω—è –∫–∞–ø—á—É –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç"
}

phrases_tips = {
	"captcha_pidors": "–ï—Å–ª–∏ –¥–∞—É–Ω–∏—á–∏ –ø—Ä–∏—à–ª—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–ø—á"
}


class LesyaAccountStatus(Enum):
	"""–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞. –ù—É —Ç—É—Ç, –¥—É–º–∞—é, –≤—Å—ë —è—Å–Ω–æ"""
	Default = 0
	VIP = 1
	Premium = 2
	Deluxe = 3


class MessageType(Enum):
	"""–ö–ª–∞—Å—Å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è –Ω–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""

	# –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	ProfileInfo = 0  # –∏–Ω—Ñ–∞ –æ –ø—Ä–æ—Ñ–∏–ª–µ
	BannedNotification = 1  # –∏–Ω—Ñ–∞ –æ –±–∞–Ω–µ
	Captcha = 2  # –∫–∞–ø—á–∞
	Captcha_bruted = 3  # —Å–±—Ä—É—Ç–∏–ª –∫–∞–ø—á—É
	VOID1 = 4  # !!

	# –±–æ–Ω—É—Å—ã
	Bonus_Message = 5  # –±–æ–Ω—É—Å—ã
	Bonus_MoneyMessage = 6  # –ê–≤—Ç–æ–≤–∞–ª—é—Ç–∞ –ø—Ä–µ–º–∏—É–º–∞
	Bonus_MoneyGiveMessage = 7  # –ì–∏–≤ –ª–∏–º–∏—Ç

	# –ê–≤—Ç–æ–±–æ–π
	AutoFight_Continue = 8  # –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –±–æ—è
	AutoFight_Waiting = 9  # —É–∂–µ –≤ –±–æ—é –∏–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å
	AutoFight_NoPets = 10  # –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤
	AutoFight_NewPets = 11  # –Ω–æ–≤—ã–µ –ø–∞—Ü–∞–Ω—ã –≤ –æ—Ç—Ä—è–¥–µ

	BalanceInfo = 12  # –î–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞

	VOID3 = 13  # —á–µ–ª..

	BusinessMoneyMessage = 15  # –î–µ–Ω—å–≥–∏ —Å –±–∏–∑–Ω–µ—Å–æ–≤
	BitcoinsMessage = 16  # –ë–∏—Ç–∫–æ–∏–Ω—ã —Å —Ñ–µ—Ä–º—ã

	AutoProgress_MaxFarms = 17  # –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è
	AutoProgress_BoughtFarms = 18 # –ö—É–ø–∏–ª —Ñ–µ—Ä–º—ã

	# –û–≥—Ä–∞–±–ª–µ–Ω–∏—è –∫–ª–∞–Ω–æ–≤
	ClanHeist_BaseMessage = 19  # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	ClanHeist_BaseNoPlan = 20  # –ü–ª–∞–Ω–∞ –Ω–µ—Ç
	ClanHeist_BaseWaiting = 21  # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞
	ClanHeist_Choose = 22  # –í—ã–±–æ—Ä –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è
	ClanHeist_PlanChoose = 23  # –í—ã–±–æ—Ä –ø–ª–∞–Ω–∞
	ClanHeist_Started = 24  # –ü–æ—Å–ª–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç / –ö–æ–≥–¥–∞ —É–∂–µ –∏–¥—ë—Ç, –∞ —Ç—ã –ø—Ä–æ–ø–∏—Å–∞–ª —Å—Ç–∞—Ä—Ç
	ClanHeist_Down = 25  # "–≤ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"...

	# –í–æ–π–Ω—ã –∫–ª–∞–Ω–æ–≤
	ClanWar_NotStarted = 26  # –í–æ–π–Ω–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
	ClanWar_SearchStarted = 27  # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–ª–∏ —É–∂–µ —Å—Ä–∞–∂–µ–Ω–∏–µ
	ClanWar_Preparing = 28  # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–ª–∏ —É–∂–µ —Å—Ä–∞–∂–µ–Ω–∏–µ
	ClanWar_UNDEF0 = 29  # –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–±–æ—Ä–æ—á–Ω–æ–≥–æ —ç—Ç–∞–ø–∞
	ClanWar_Collect = 30  # –ò–¥—ë—Ç —Å–±–æ—Ä –ø–∏—Ç–æ–º—Ü–µ–≤ —Å –±–æ—ë–≤
	ClanWar_FinalFight = 31  # –§–∏–Ω–∞–ª—å–Ω–∞—è –±–∏—Ç–≤–∞
	ClanWar_FinalWait = 32  # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

	# –ö–µ–π—Å—ã
	OpenCase_Voids = 33  # –æ—Ä–∏–≥ –∫–æ–º–º–µ–Ω—Ç: –ù–∞ –ø—É—Å—Ç—ã—à–∫–∞—Ö –º–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ 1, –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
	OpenCase_Info = 34  # –∏–Ω—Ñ–∞ –æ –∫–µ–π—Å–∞—Ö
	OpenCase_NoCases = 35  # —É –Ω–∞—Å –Ω–µ—Ç –∫–µ–π—Å–æ–≤
	OpenCase_4Got = 36  # 4 –ø—Ä–µ–¥–º–µ—Ç–∞
	# –æ—Ä–∏–≥: –≤–∞–º –ø—ã–ø–∞–ª(–æ) 1(1) –∫–µ–π—Å(–æ–≤) / –≤–∞—à (VIP/–ü—Ä–µ–º) –ø—Ä–∏–∑ (–Ω–∞ —Å–µ–≥–æ–¥–Ω—è) ‚Äî 1(00) (–¥–æ–Ω–∞—Ç) –∫–µ–π—Å(–æ–≤)
	OpenCase_GotCase = 37  # –∫–æ–º–º–µ–Ω—Ç –≤—ã—à–µ

	# –ê–≤—Ç–æ —Ç—Ä–µ–π–¥
	AutoTrade_Earned = 38  # –º—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏
	AutoTrade_Lost = 39  # –º—ã –ø–æ—Ç–µ—Ä—è–ª–∏

	# –ê–≤—Ç–æ —Å—Ç–∞–∫–∞–Ω (auto_cup)
	AutoCup_True = 40  # –ø—Ä–∞–≤–∏–ª—å–Ω–æ
	AutoCup_False = 41  # –Ω–µ–≤–µ—Ä–Ω–æ

	# –ê–≤—Ç–æ –∫–∞–∑–∏–Ω–æ
	AutoCasino_Lost = 42  # –ø—Ä–æ–∏–≥—Ä–∞–ª–∏
	AutoCasino_Win = 43  # –≤—ã–∏–≥—Ä–∞–ª–∏

	# –†–∞–±–æ—Ç–∞
	Works_Time = 44  # –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
	Works_DayEnd = 45  # —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–∫–æ–Ω—á–µ–Ω
	# –ê–≤—Ç–æ–ø–æ–≤—ã—à–µ–Ω–∏–µ
	Works_NewJob = 46  # –Ω–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞
	Works_JobList = 47  # "–º–æ–∂–µ—Ç–µ —É—Å—Ç—Ä–æ–∏—Ç—Å—è –Ω–∞ –æ–¥–Ω—É –∏–∑ —Ä–∞–±–æ—Ç"
	Works_JobInJobList = 48  # new_job –∏ ", –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"
	Works_NoJob = 49  # –Ω–∏–≥–¥–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º
	Works_UNDEF0 = 50  # "–≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ"

	# –ò–Ω—Ñ–∞ –æ –ø–µ—Ç–∞—Ö
	Pets_NoPets = 51  # –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤
	Pets_Page = 52  # ", —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
	Pets_Shop = 53 # –ó–æ–æ—Ç–æ–≤–∞—Ä—ã

	# –ö–ª–∞–Ω
	Clan_Joined = 54  # –≤—Å—Ç—É–ø–∏–ª–∏ –∏–ª–∏ —É–∂–µ —Å–æ—Å—Ç–æ–∏–º
	Clan_Invite = 55  # –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –∫–ª–∞–Ω
	Clan_MultipleInvite = 56  # –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –∏ –±–æ—Ç –ø—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å

	# –ê–≤—Ç–æ–∑–∞–∫—É–ø
	AutoBuy_Message = 57  # –ê–≤—Ç–æ–∑–∞–∫—É–ø –¥–ª—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏–π
	AutoBuy_NoClan = 58  # –Ω–∞—Å –≤ –∫–ª–∞–Ω–µ –Ω–µ—Ç

	# –ü–µ—Ä–µ–¥–∞—á–∞ –¥–µ–Ω–µ–≥
	MoneyTransactions_Received = 59  # –Ω–∞–º –ø–µ—Ä–µ–≤–µ–ª–∏
	MoneyTransactions_Sent = 60  # –º—ã –ø–µ—Ä–µ–≤–µ–ª–∏
	MoneyTransactions_NotEnough = 61 # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ

	# –î–µ–Ω—å–≥–∏ —Å –∫–µ–π—Å–∞ –∏ —Ä–∞–±–æ—Ç—ã
	WorkMoney_Received = 62  # –Ω–∞–º –≤—ã–ø–∞–ª–∞ –≤–∞–ª—é—Ç–∞
	WorkMoney_Earned = 63  # –º—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏
	WorkMoney_NoEnoughMoney = 64  # –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç

	ChatCommands_Ban = 65  # –ë–∞–Ω
	ChatCommands_PlanChoosed = 66  # "–≤—ã –≤—ã–±—Ä–∞–ª–∏ –ø–ª–∞–Ω"
	ChatCommands_Buy = 67  # –ó–∞–∫—É–ø
	ChatCommands_Ping = 68  # –ü–∏–Ω–≥
	ChatCommands_Promo = 69  # –ü—Ä–æ–º–æ


@dataclass
class LesyaBTCMiner:
	"""–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –±–∏—Ç–∫–æ–∏–Ω —Ñ–µ—Ä–º"""
	name: str
	count: int


@dataclass
class LesyaBan:
	"""–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –±–∞–Ω–µ"""
	permanent: bool  # –ü–µ—Ä–º–∞—á –∏–ª–∏ –Ω–µ—Ç
	ban_time: int  # –í—Ä–µ–º—è, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –∑–∞–±–∞–Ω–∏–ª–∏, –≤ —Å–µ–∫—É–Ω–¥–∞—Ö. –ï—Å–ª–∏ –ø–µ—Ä–º–∞—á, —Ä–∞–≤–Ω–æ -1
	release_time: int  # –í—Ä–µ–º—è, –∫–æ–≥–¥–∞ –≤—ã–ø—É—Å—Ç—è—Ç, –≤ UNIX-time. –ï—Å–ª–∏ –ø–µ—Ä–º–∞—á, —Ä–∞–≤–Ω–æ 9999999999
	reason: str  # –ø—Ä–∏—á–∏–Ω–∞


@dataclass
class LesyaAccount:
	"""–ö–ª–∞—Å—Å –¥–ª—è —Ä–µ–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ /profile"""
	uid: int
	name: str
	status: LesyaAccountStatus
	balance: float
	in_bank: float
	bitcoin_balance: float
	clan: bool
	btcminer: LesyaBTCMiner
	additional_info: dict


# –ö–∞—Ä—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏ —Å —Å—Ç–∞—Ç—É—Å–æ–º –≤ –º–∞—à–∏–Ω–æ–ø–æ–Ω–∏–º–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
STATUS_MAP = {
	"V.I.P": LesyaAccountStatus.VIP,
	"v.i.p": LesyaAccountStatus.VIP,
	"Premium": LesyaAccountStatus.Premium,
	"premium": LesyaAccountStatus.Premium,
	"Deluxe": LesyaAccountStatus.Deluxe,
	"deluxe": LesyaAccountStatus.Deluxe
}

STATUS_UNMAP = {
	LesyaAccountStatus.Default: "–ò–≥—Ä–æ–∫",
	LesyaAccountStatus.VIP: "V.I.P",
	LesyaAccountStatus.Premium: "Premium",
	LesyaAccountStatus.Deluxe: "Deluxe"
}


class LesyaClassifier:
	"""–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π. –¢–æ–∂–µ —Å–∞–º–æ–µ —á—Ç–æ 30 –∏—Ñ–æ–≤, –Ω–æ –ª–∞–∫–æ–Ω–∏—á–Ω–µ–µ"""
	classify_table = {  # —Ç–∞–±–ª–∏—Ü–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
		MessageType.ProfileInfo: ("–≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:",),
		MessageType.BannedNotification: ("–≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã",),
		MessageType.Captcha: ("–≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Ö–æ–∂–∏ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ. —á—Ç–æ–±—ã –¥–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –≤—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–ª–æ–≤–µ–∫, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ.",),
		MessageType.Captcha_bruted: (", –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–Ω—è—Ç—ã, —Å–ø–∞—Å–∏–±–æ",),

		MessageType.Works_Time: ("—Ä–∞–±–æ—Ç–∞ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞"),
		MessageType.Works_DayEnd: ("—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–∫–æ–Ω—á–µ–Ω", "—Ä–∞–±–æ—á–∞—è –Ω–µ–¥–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"),
		MessageType.Works_NewJob: ("–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞"),
		MessageType.Works_JobList: (lambda text: (", –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ " in text or ", –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω ") and " —Ä–∞–∑–¥–µ–ª" in text),
		MessageType.Works_JobInJobList: (", –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"),
		MessageType.Works_NoJob: ("–≤—ã –Ω–∏–≥–¥–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ", "–≤—ã –Ω–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–µ–Ω—ã"),
		MessageType.Works_UNDEF0: ("–≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ"),

		MessageType.Pets_NoPets: ("—É –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤"),
		MessageType.Pets_Page: (", –≤–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã ["),

		MessageType.Pets_Shop: (", —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤:"),



		MessageType.Bonus_Message: ("–±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω", "–±–æ–Ω—É—Å —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω",
									"—Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", "—Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å v.i.p –±–æ–Ω—É—Å",
									"—Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å premium –±–æ–Ω—É—Å", ", –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å deluxe –±–æ–Ω—É—Å —á–µ—Ä–µ–∑"),
		MessageType.Bonus_MoneyMessage: ("–ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª—é—Ç—É –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑", "–ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—É—é –≤–∞–ª—é—Ç—É –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ "),
		MessageType.Bonus_MoneyGiveMessage: ("–≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–¥–∞–≤–∞—Ç—å –≤–∞–ª—é—Ç—É —á–µ—Ä–µ–∑"),

		MessageType.AutoBuy_Message:
			(lambda text, stats: stats.get("need_to_buy") and \
			 "—Ç—Ä–µ–±—É–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–∏:" in text),
		MessageType.AutoBuy_NoClan:
			(lambda text, stats: stats.get("need_to_buy") and \
			 "—ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–ª–∞–Ω–∞" in text),

		MessageType.AutoFight_Continue: ("–≤–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏", "–≤–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã –ø–æ–±–µ–¥–∏–ª–∏"),
		MessageType.AutoFight_Waiting: ("–≤—ã –Ω–∞–ø–∞–ª–∏ –Ω–∞ –∏–≥—Ä–æ–∫–∞", "—Ç–µ–∫—É—â–∏–π –±–æ–π:",
										"–≤–∞—à–∏–º –ø–∏—Ç–æ–º—Ü–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–¥—ã—Ö",
										"–ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –±–æ—è:", "–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ"),

		MessageType.AutoFight_NoPets: ("–Ω–∞–±–µ—Ä–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ –æ—Ç—Ä—è–¥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã",
									   "–¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –±–∏—Ç–≤—ã –Ω—É–∂–Ω—ã –ø–∏—Ç–æ–º—Ü—ã",
									   "–¥–ª—è –Ω–∞—á–∞–ª–∞ –±–æ—è –≤–∞–º —Ç—Ä–µ–±—É—é—Ç—Å—è –ø–∏—Ç–æ–º—Ü—ã"),
		MessageType.AutoFight_NewPets: ("—Ç–µ–ø–µ—Ä—å –≤ –≤–∞—à–µ–º –æ—Ç—Ä—è–¥–µ"),

		MessageType.ClanHeist_BaseNoPlan: ("–ø–ª–∞–Ω: –Ω–µ –≤—ã–±—Ä–∞–Ω", "–≤—ã–±—Ä–∞–Ω –ø–ª–∞–Ω: –ø–ª–∞–Ω–∞ –Ω–µ—Ç", "–°–ø–æ—Å–æ–±—ã –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:"),
		MessageType.ClanHeist_BaseWaiting: ("–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ", ", –≤ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º"),
		MessageType.ClanHeist_BaseMessage: (", –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–≥—Ä–∞–±–ª–µ–Ω–∏–∏ "),
		MessageType.ClanHeist_Choose: (lambda text: ", –¥–æ—Å—Ç—É–ø–Ω–æ " in text and "–æ–≥—Ä–∞–±–ª–µ–Ω" in text and "- —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏" in text),
		MessageType.ClanHeist_PlanChoose:
			(lambda text: ", –≤—ã –Ω–∞—á–∞–ª–∏ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ" in text and "–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è" in text),
		MessageType.ClanHeist_Started: (", –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!", ", –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ —É–∂–µ –Ω–∞—á–∞–ª–æ—Å—å", ", –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ"),
		MessageType.ClanHeist_Down: (", –≤ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"),

		MessageType.ClanWar_NotStarted: (", –∫–ª–∞–Ω–æ–≤–∞—è –≤–æ–π–Ω–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"),
		MessageType.ClanWar_SearchStarted: (", –≤—ã –Ω–∞—á–∞–ª–∏ –ø–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!"),
		MessageType.ClanWar_Preparing: ("–ù–£, –≠–¢–û–ì–û –ù–ï –ë–£–î–ï–¢ –£–ñ–ï:"),
		MessageType.ClanWar_UNDEF0: ("–ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–±–æ—Ä–æ—á–Ω–æ–≥–æ —ç—Ç–∞–ø–∞:"),
		MessageType.ClanWar_Collect: ("–¥–æ –∫–æ–Ω—Ü–∞ –æ—Ç–±–æ—Ä–æ—á–Ω–æ–≥–æ —ç—Ç–∞–ø–∞:"),
		MessageType.ClanWar_FinalFight: ("—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –±–∏—Ç–≤–∞ —á–µ—Ä–µ–∑:"),
		MessageType.ClanWar_FinalWait: ("–∫–æ–Ω–µ—Ü –≤–æ–π–Ω—ã —á–µ—Ä–µ–∑:"),

		MessageType.OpenCase_Voids: ("—á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–µ–π—Å–æ–≤ –∑–∞ —Ä–∞–∑, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"),
		MessageType.OpenCase_Info: (", –≤–∞—à–∏ –∫–µ–π—Å—ã:", "üì¶ –≤–∞—à–∏ –∫–µ–π—Å—ã:"),
		MessageType.OpenCase_NoCases: (", —É –≤–∞—Å –Ω–µ—Ç –∫–µ–π—Å–æ–≤"),
		MessageType.OpenCase_4Got: (lambda text: ", –≤–∞–º –≤—ã–ø–∞–ª" in text and " –ø—Ä–µ–¥–º–µ—Ç" in text),
		MessageType.OpenCase_GotCase:
			(lambda text: ("üì¶ –≤–∞–º –≤—ã–ø–∞–ª" in text and " –∫–µ–π—Å" in text) or (
				", –≤–∞—à" in text and " –ø—Ä–∏–∑" in text and "–∫–µ–π—Å–æ–≤" in text)),

		MessageType.AutoCup_True: (", –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ø—Ä–∏–∑ ", ", –≤–µ—Ä–Ω–æ! –ø—Ä–∏–∑ ",
								   ", –≤—ã —É–≥–∞–¥–∞–ª–∏! –ø—Ä–∏–∑ "),
		MessageType.AutoCup_False:
			(lambda text: ", –Ω–µ–≤–µ—Ä–Ω–æ, —ç—Ç–æ –±—ã–ª " in text and "-–π —Å—Ç–∞–∫–∞–Ω—á–∏–∫" in text),

		MessageType.AutoCasino_Lost: (", –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏"),
		MessageType.AutoCasino_Win: (", –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏"),

		MessageType.BalanceInfo: (", –Ω–∞ —Ä—É–∫–∞—Ö "),

		MessageType.MoneyTransactions_Received:
			(lambda text: "[–£–í–ï–î–û–ú–õ–ï–ù–ò–ï]" in text and "‚ñ∂Ô∏è –∏–≥—Ä–æ–∫" in text and "–ø–µ—Ä–µ–≤–µ–ª –≤–∞–º" in text),
		MessageType.MoneyTransactions_Sent:
			(lambda text: ", –≤—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –∏–≥—Ä–æ–∫—É" in text and "$" in text),
		MessageType.MoneyTransactions_NotEnough: ("–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ", "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥"),

		MessageType.WorkMoney_Received: (lambda text: "–≤–∞–º –≤—ã–ø–∞–ª–æ" in text and "–≤–∞–ª—é—Ç–∞:" in text),
		MessageType.WorkMoney_Earned: ("–≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏"),

		MessageType.AutoProgress_MaxFarms: ("—É –í–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–µ—Ä–º",),

		MessageType.ChatCommands_Ban: ("!ban"),
		MessageType.ChatCommands_PlanChoosed: (", –≤—ã –≤—ã–±—Ä–∞–ª–∏ –ø–ª–∞–Ω ‚Ññ"),
		MessageType.ChatCommands_Buy: ("!–∑–∞–∫—É–ø"),
		MessageType.ChatCommands_Ping: ("!–ø–∏–Ω–≥"),
		MessageType.ChatCommands_Promo: ("!–ø—Ä–æ–º–æ")
	}

	def __init__(self, additional_info):
		self._addinfo = additional_info
		self._logger = logging.getLogger("LesyaAuto::Classifier")

	def classify_message(self, text) -> MessageType:
		"""–ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ç–∞–±–ª–∏—Ü–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ï—Å–ª–∏ –∫–ª—é—á –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è"""
		self._logger.debug("Classifying message %s", text)
		for key, val in self.classify_table.items():
			if isinstance(val, tuple):
				for k in val:
					if k in text:
						return key
			elif isinstance(val, str):
				if val in text:
					return key
			elif isinstance(val, FunctionType):
				profile = self._addinfo.get("profile", None)
				if not profile:
					arg2 = {}
				else:
					arg2 = profile.additional_info
				args = (text, arg2) if val.__code__.co_argcount == 2 else (
					text,)  # pylint: disable=no-member
				if val(*args):
					return key
		self._logger.error("Classification failed")
		return None


class LesyaParser:
	"""–ü–∞—Ä—Å–µ—Ä —Ä–∞–∑–Ω—ã—Ö –ø—Ä–∏–∫–æ–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""

	def __init__(self, db):
		self.__db = db

	def __getattr__(self, attrname):
		if attrname == "profile":
			return self.__db["profile"]
		raise AttributeError

	def _get_line_startswith(self, text, startswith) -> str:
		"""–ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–µ–∫—Å—Ç–∞ –≤ startswith.
		–Æ–∑–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–º–µ—Å—Ç–æ —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–∏"""
		try:
			return next((line for line in text.lower().split(
				"\n") if line.startswith(startswith.lower())))
		except StopIteration:
			return None

	def _find_line_contains(self, text, contains) -> str:
		"""–ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç –≤ contains. –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, —é–∑–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä"""
		try:
			return next((line for line in text.lower().split(
				"\n") if contains.lower() in line))
		except StopIteration:
			return None

	def _convert_time(self, timestr) -> int:
		"""–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–µ–ª, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –¥–≤–æ–µ—Ç–æ—á–∏–µ–º, –Ω–∞ –≤—ã—Ö–æ–¥–µ —Å–µ–∫—É–Ω–¥—ã.
		–ú–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–ª–≤–æ–º —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 4, –æ—Ç —Å–µ–∫—É–Ω–¥ –¥–æ –¥–Ω–µ–π"""
		# –î–∞, –≤—ã–≥–ª—è–¥–∏—Ç —Å—Ç—Ä–∞—à–Ω–æ, –∏ –∑–∞–≤—Ç—Ä–∞ —è –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ —Å–º–æ–≥—É –æ–±—å—è—Å–Ω–∏—Ç—å –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç.
		# –ù–æ, –∑–∞—Ç–æ –∫–æ–º–ø–∞–∫—Ç–Ω–æ, –∏ –±–µ–∑ –ª–µ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤.

		# –ú–æ–∂–Ω–æ –Ω–∞–∫–∏–Ω—É—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞–ø—Ä–∏–º–µ—Ä –Ω–µ–¥–µ–ª—å, –º–µ—Å—è—Ü–æ–≤,
		# –ø—Ä–æ—Å—Ç–æ –∑–∞–∫–∏–Ω—É–≤ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –≤–Ω—É—Ç—Ä–∏ zip() –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
		return sum(x * int(t[:2]) for x, t in zip([1, 60, 3600, 86400], timestr.split(":")[::-1]))

	def parse_id(self, text) -> int:
		"""–ü–∞—Ä—Å–∏—Ç –∞–π–¥–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä:

		–í—Ö–æ–¥:
			–¢–æ–≤–∞—Ä–∏—â, –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
			ID: 2107924
			–ë–∞–ª–∞–Ω—Å: 3.951.766.420$
			–ë–∏—Ç–∫–æ–∏–Ω—ã: 1.000‚Çø
			–†–µ–π—Ç–∏–Ω–≥: 2

		–†–µ–∑—É–ª—å—Ç–∞—Ç:
			2107924

		"""
		return int(self._get_line_startswith(text, "üîé ID:").split(" ")[2])

	def parse_name(self, text) -> str:
		"""–ü–∞—Ä—Å–∏—Ç –Ω–∏–∫ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
		return text.split("\n")[0][:-14] # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ", –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:"

	def convert_money(self, money):
		money = money.replace(".", "")
		money = money.replace("‚Çø", "")
		money = money.replace("+", "")
		money = int(money[:-1])
		return money

	def parse_status(self, text) -> LesyaAccountStatus:
		"""–ü–∞—Ä—Å–∏—Ç —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
		lines = text.split("\n")
		line = None
		for line_text in lines:
			if "—Å—Ç–∞—Ç—É—Å:" in line_text.lower():
				line = line_text
				break
		if not line:
			return LesyaAccountStatus.Default
		return STATUS_MAP.get(line.rsplit(" ", 1)[1], LesyaAccountStatus.Default)

	def parse_balance(self, text) -> int:
		"""–ü–∞—Ä—Å–∏—Ç –±–∞–ª–∞–Ω—Å"""
		line = self._get_line_startswith(text, "üí∞ –ë–∞–ª–∞–Ω—Å:")
		if not line:
			return 0
		return int(line.rsplit(" ", 1)[1][:-1].replace(".", ""))

	def parse_in_bank(self, text) -> int:
		"""–ü–∞—Ä—Å–∏—Ç –±–∞–ª–∞–Ω—Å –≤ –±–∞–Ω–∫–µ"""
		line = self._get_line_startswith(text, "üí≥ –í –±–∞–Ω–∫–µ:")
		if not line:
			return 0
		return int(line.split(" ")[3][:-1].replace(".", ""))

	def parse_bitcoin(self, text) -> int:
		"""–ü–∞—Ä—Å–∏—Ç –±–∞–ª–∞–Ω—Å –±–∏—Ç–∫–æ–∏–Ω–æ–≤"""
		line = self._get_line_startswith(text, "üåê –ë–∏—Ç–∫–æ–∏–Ω—ã:")
		if not line:
			return 0
		return int(line.split(" ")[2][:-1].replace(".", ""))

	def parse_clan(self, text) -> bool:
		"""–ü–∞—Ä—Å–∏—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª–∞–Ω–∞"""
		line = self._find_line_contains(text, "–ö–ª–∞–Ω:")
		return line is not None

	def parse_btcminer(self, text) -> LesyaBTCMiner:
		"""–ü–∞—Ä—Å–∏—Ç –±–∏—Ç–∫–æ–∏–Ω —Ñ–µ—Ä–º—É"""
		line = self._get_line_startswith(text, "‚†Äüîã –ë–∏—Ç–∫–æ–∏–Ω —Ñ–µ—Ä–º–∞:")
		if not line:
			return LesyaBTCMiner("", 0)
		line = line.replace("üîã –ë–∏—Ç–∫–æ–∏–Ω —Ñ–µ—Ä–º–∞: ", "")
		count_text_start_idx = line.index("(")
		count_test_stop_idx = line.index(")")
		name = line[1:count_text_start_idx].rstrip()
		count = int(line[count_text_start_idx
					+ 2: count_test_stop_idx].replace(" ", ""))
		return LesyaBTCMiner(name, count)

	def parse_ban(self, text):
		"""–ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–≤–µ–¥–∫–æ–π –æ –±–∞–Ω–µ"""
		lines = text.split("\n")
		firstline = lines[0]
		logger.info(firstline)
		permanent = "–Ω–∞–≤—Å–µ–≥–¥–∞" in firstline
		ban_time = -1
		release_time = 999999999999
		if not permanent:
			logger.info(firstline.rsplit(" ", 1)[1])
			ban_time = self._convert_time(firstline.rsplit(" ", 1)[1])
			release_time = time() + ban_time
		reasonline = lines[1]
		reason = "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
		if reasonline:
			reason = reasonline[11:]
		return LesyaBan(permanent, ban_time, release_time, reason)

	def parse_account_info(self, text) -> LesyaAccount:
		"""–°–ø–∞—Ä—Å–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ü—Ä–æ—Ñ–∏–ª—å)"""
		return LesyaAccount(self.parse_id(text), self.parse_name(text), self.parse_status(text),
							self.parse_balance(text), self.parse_in_bank(text),
							self.parse_bitcoin(text), self.parse_clan(text),
							self.parse_btcminer(text), {})

	def parse_fights(self, text):
		if not "–ª–µ—á–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–µ–≤" in text:
			return False
		lines = text.split("\n")
		times_ = []
		for line in lines:
			if ":" in line:
				timestr = line.rsplit(" ", 1)[1]
				if "[" in timestr and ":" in timestr:
					val = self._convert_time(timestr)
					times_.append(val if val else 0)
		return time() + max(times_) + 2

	def parse_last_entry(self, text):
		last = "1"
		lines = text.split("\n")
		for line in lines:
			dot = line.find(".")
			if line[:1] == "üîπ" and dot != -1:
				last = line[2:dot]
		return str(last)

	def lastline_time(self, text):
		return self._convert_time(text.split("\n")[-1].rsplit(" ", 1)[1])

	def clanheist_planchoose(self, text):
		line = self._find_line_contains(text, "–≤—Ä–µ–º—è –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É:")
		return self._convert_time(line.rsplit(" ", 1)[1])

	def clanwar_parse(self, text):
		mtime = self._convert_time(text.split("\n")[-2].rsplit(" ", 1)[1])
		return mtime, mtime < 666

	def clanwar_parsepoints(self, text):
		text = text.lower()
		lines = text.split("\n")
		max_upgrade = 16
		pets = {}
		points = 0
		for line in lines:
			logger.info(line)
			if "–¥–æ—Å—Ç—É–ø–Ω–æ –æ—á–∫–æ–≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π:" in line:
				logger.info("found line")
				pos = line.find(":")
				points = line[pos + 2:]
				logger.info(points)
				points = int(points)
			elif "üíé" in line and "/" in line:
				start = line.find("‚≠ê")
				end = line.find("/")
				has = line[start + 1:end]
				has = int(has)
				pets[len(pets) + 1] = has
		test = []
		for pet in pets:
			has = pets[pet]
			pet = str(pet)
			if has == max_upgrade:
				continue
			for up_id in range(max_upgrade - has):
				if points <= 0:
					break
				upgrade = has + up_id + 1
				to_send = "–ö–≤ —É–ª—É—á—à–∏—Ç—å " + pet + " " + str(upgrade)
				points -= 1
				test.append(to_send)
		return test

	def opencase_parse(self, text):
		text = text.replace("<strong>‚Ññ", "")
		text = text.replace("</strong>", "")
		lines = text.split("\n")

		case_id = None
		for line in lines:
			if not "üîπ" in line or not "¬ª" in text:
				continue
			if line[1] != "üîπ":
				continue
			dot = line.find(" ¬ª")
			case_id = line[3:dot]
		return case_id

	def works_parsejob(self, text):
		line = self._find_line_contains(text, "—Ä–∞–±–æ—Ç–∞ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞")
		if not line:
			return None

		return self._convert_time(line.rsplit(" ", 1)[1])

	def pets_parse(self, text):
		_logger = logging.getLogger("LesyaAuto::PetsParser")
		arr = self.profile.additional_info.get("pets_parsed") or []

		text = text.replace(" ", "")
		text = text.replace("üîü", "10")
		text = text.replace("‚É£", "")
		text = text.replace(".", "")
		# text = text.replace(" ", "")
		lines = text.split("\n")
		for line in lines:
			if not "|" in line:
				continue
			_logger.info("Line: %s", line)
			id_end = line.find("[")
			pet_id = line[:id_end]
			hp_start = line.find("‚ù§Ô∏è")
			hp_end = line.find("|", hp_start)
			hp = line[hp_start + 2:hp_end]
			_logger.info("ID: %s", str(pet_id))
			_logger.info("HP: %s", str(hp))
			dmg = 0
			if "üí¢" in line:
				dmg_start = line.find("üí¢")
				dmg_end = line.find("|", dmg_start)
				if dmg_end != -1:
					dmg = line[dmg_start + 1:dmg_end]
				else:
					dmg = line[dmg_start + 1:]
				_logger.info("Damage: %s", str(dmg))
			mgc = 0
			if "üßø" in line:
				mgc_start = line.find("üßø")
				mgc_end = line.find("|", mgc_start)
				if mgc_end != -1:
					mgc = line[mgc_start + 1:mgc_end]
				else:
					mgc = line[mgc_start + 1:]
				_logger.info("Magic: %s", str(mgc))
			mgc_add = floor(int(mgc) * 1.1)
			_logger.info("Magic2: %s", str(mgc_add))
			total_damage = int(dmg) + mgc_add
			_logger.info("Total Damage: %s", str(mgc_add))
			arr.append({"ID": pet_id, "HP": int(hp), "DMG": total_damage})
		arr.sort(key=lambda x: x.get("DMG"), reverse=True)
		return arr

	def petshop_parse(self, text):
		_logger = logging.getLogger("LesyaAuto::PetsParser")
		_logger.info("Started parsing petshop")

		arr = {}#self.profile.additional_info.get("parsed_petshop") or []
		lines = text.split("\n")
		pets = False
		for line in lines:
			if line == "üè† –î–æ–º–∏–∫–∏:":
				pets = True
			elif pets and "‚è´ –£—Å–∏–ª–∏—Ç–µ–ª–∏ –∏ —É—Å–∫–æ—Ä–∏—Ç–µ–ª–∏" in line:
				pets = False
			if pets:
				last = line[-1:]
				if last == "‚Çø":
					start = line.find("‚Ññ")
					end = line.find("</strong>")
					num = line[start+1:end]
					price = self.convert_money(last)
					arr["parsed_petshop"][num] = price
		self.profile.additional_info["parsed_petshop"] = arr


	def bonus_parsebonus(self, text):
		timestr = text.rsplit(" ", 2)
		if ":" not in timestr[-1]:
			timestr.pop(-1)
		return ("vip_bonus" if "v.i.p" in text
				else ("premium_bonus" if "premium" in text else "deluxe_bonus" if "deluxe" in text else "bonus")), \
			self._convert_time(timestr[-1])

	def bonus_parsemoney(self, text):
		return self._convert_time(text.rsplit(" ", 1)[1])

	def parse_balance2(self, text):
		balance = int(self._find_line_contains(text, "–Ω–∞ —Ä—É–∫–∞—Ö").rsplit(" ", 1)[1][:-1].replace(".", ""))
		btc = int(self._find_line_contains(text, "–±–∏—Ç–∫–æ–∏–Ω–æ–≤:").rsplit(" ", 1)[1][:-1].replace(".", ""))
		return balance, btc


def gen_phrase():
	phrase_id = randint(0, len(humanizer_phrases) - 1)
	phrase = humanizer_phrases[phrase_id]
	if phrase == "–ü–†–ò–ú–ï–†":
		phrase = "–†–µ—à–∏ "
		spaces = "" if randint(0, 1) else " "
		for i in range(randint(1, 5)):
			first = str(randint(0, 1000000))
			second = str(randint(0, 1000000))
			action = choice(["+", "-", "*", "/"])
			start = action
			if i == 0:
				start = ""
			phrase = phrase + start + first + spaces + action + spaces + second + spaces
	return phrase


def gen_time(mode="etc"):
	time_ = COOLDOWNS.get(mode)
	if time_ is None:
		time_ = 10
	return randint(0, time_)


class BaseHandler:
	"""–ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≤–µ–Ω—Ç–æ–≤

	–í—Å—è –º–∞–≥–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –ø–æ–º–æ—â—å—é —á–ª–µ–Ω–∞ __map__.
	–ß—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ –∑–∞ —á—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω—É–∂–Ω–æ –≤–ø–∏—Å–∞—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å __map__ –ø—Ä–∏–º–µ—Ä–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ:
	"–ò–º—è_–∏–≤–µ–Ω—Ç–∞": "–ò–º—è_–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"

	–ò–º—è_–∏–≤–µ–Ω—Ç–∞ - —á—Ç–æ-–Ω–∏–±—É—Ç—å –∏–∑ MessageType. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–≤—ë–∑–¥–æ—á–∫–∏. AutoTrade_* –∑–Ω–∞—á–∏—Ç, —á—Ç–æ
		–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–∏—Ç –≤—Å–µ –∏–≤–µ–Ω—Ç—ã, –∏–º—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ AutoTrade_. –ó–≤—ë–∑–¥–æ—á–∫–∞ –º–æ–∂–µ—Ç
		–±—ã—Ç—å –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Å—Ç—Ä–æ–∫–∏.
	–ò–º—è_–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ - –∏–º—è –º–µ—Ç–æ–¥–∞ –∫–ª–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–≤–µ–Ω—Ç.

	–í–ê–ñ–ù–û! –∏–º—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—Å–∞—Ç—å –≤ –∫–∞–≤—ã—á–∫–∞—Ö (—Ç–æ –µ—Å—Ç—å —Ö—Ä–∞–Ω–∏—Ç—å –≤ —Å—Ç—Ä–æ–∫–µ).
	–ö–æ–º–ø–∏–ª—è—Ç–æ—Ä –∫–∞—Ä—Ç —Å–∞–º –Ω–∞–π–¥—ë—Ç –µ—ë –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞"""

	parser: LesyaParser
	profile: LesyaAccount
	times: dict
	_mod: 'LesyaMod'
	__map__: dict
	settings: dict

	def __init__(self, mainmod):
		self.mainmod = mainmod
		self.parser = mainmod.parser
		# self.profile = mainmod._temp_db["profile"]
		self.times = mainmod._times
		self._logger = logging.getLogger("LesyaAuto::%s" % (self.__class__.__name__))
		self._mod = mainmod
		self.__compiled_map__ = self.build_map()
		self.settings = mainmod._settings

	def __getattr__(self, attrname):
		if attrname == "profile":
			return self.mainmod._temp_db["profile"]
		raise AttributeError("Error in %s: attribute %s not found. listing: %s" % (
							 self.__class__.__name__, attrname, str(dir(self))))

	def set_time(self, time_name, entry):
		self._mod.set_time(time_name, entry)

	async def send_bot(self, text):
		return await self._mod.send_bot(text)

	async def send_group(self, text):
		return await self._mod.send_group(text)

	def build_map(self):
		res_map = {}
		possible_types_str = MessageType.__members__.keys()

		for key, val in self.__map__.items():
			if key in possible_types_str:
				res_map[getattr(MessageType, key)] = getattr(self, val)
				continue
			if key[-1] == "*":
				possible_types = [getattr(MessageType, typename) for typename
								  in possible_types_str
								  if typename.startswith(key[:-1])]
				for type_ in possible_types:
					res_map[type_] = getattr(self, val)
				continue
			if "*" in key:
				idx = key.index("*")
				start_text = key[:idx]
				end_text = key[idx + 1:]
				possible_types = [getattr(MessageType, typename) for typename
								  in possible_types_str
								  if typename[:-len(end_text)].startswith(start_text)
								  and typename[len(start_text):].endswith(end_text)]
				for type_ in possible_types:
					res_map[type_] = getattr(self, val)
				continue
			logging.getLogger("AutoLesya::MapCompiler").fatal(
				"No found entry for %s (module %s)", key, self.__class__.__name__)
			raise KeyError
		return res_map


class AutoFight(BaseHandler):
	__map__ = {
		"AutoFight_*": "AF_MAIN"
	}

	async def AF_MAIN(self, message, classified):
		if classified == MessageType.AutoFight_Continue:
			if tmp_x := self.parser.parse_fights(message.text[1:]):
				self.set_time("fight", tmp_x + gen_time("fight"))
			else:
				self.set_time("fight", time() + gen_time("fight"))
				self._logger.info("Gonna start new fight soon")
			if "–≤–∞–º –≤—ã–ø–∞–ª" in message.text and " –∫–µ–π—Å" in message.text:
				if not self.profile.additional_info.get("opencase"):
					self.profile.additional_info["opencase"] = 5
		elif classified == MessageType.AutoFight_Waiting:
			args = message.text.rsplit(" ", 1)
			if ":" in args[1] and "–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ" in message.text:
				wait = self.parser._convert_time(args[1]) or 0
				self.set_time("fight", time() + wait)
			else:
				self.set_time("fight", time() + 600)
				self._logger.info("There is battle/waiting. Gonna wait 10 min before the fight")
		elif classified == MessageType.AutoFight_NoPets:
			self.profile.additional_info["no_pets"] = True
			self._logger.info("I dont have pets. No sense for fighting")
		elif classified == MessageType.AutoFight_NewPets:
			self.set_time("fight", time() + gen_time("fight"))
			del self.profile.additional_info["no_pets"]


class ClanHeist(BaseHandler):
	__map__ = {
		"ClanHeist_*": "CH_MAIN"
	}

	async def CH_MAIN(self, message, classified):
		if not self.settings.get("clan_heist"):
			return

		text = message.text.lower()
		if classified == MessageType.ClanHeist_BaseMessage:
			self._logger.info("–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
			self._logger.info(text)
			if "–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ " in text:
				self._logger.info("–ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è")
				wait = self.parser._convert_time(text.rsplit(" ", 1)[1])
				self.set_time("clan_heist", time() + wait + 60)
			elif "–≤—ã–±—Ä–∞–Ω –ø–ª–∞–Ω: –ø–ª–∞–Ω–∞ –Ω–µ—Ç" in text or "—Å–ø–æ—Å–æ–±—ã –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:" in text or "–ø–ª–∞–Ω: –Ω–µ –≤—ã–±—Ä–∞–Ω" in text:
				self._logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω")
				clan_time = text.rsplit(" ", 1)[1]
				if ":" in clan_time:
					self.set_time("clan_heist", time() + self.parser._convert_time(clan_time))
				await self.send_group("–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ –ø–ª–∞–Ω 1")
				await self.send_group("–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ –ø–ª–∞–Ω 1")
			elif "–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ" in text:
				self._logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ")
				self.set_time("clan_heist", time() + 600)
				await self.send_bot("–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç")
		elif classified == MessageType.ClanHeist_Choose:
			line = message.text.split("\n")[0]
			last = line.rsplit(" ", 2)[1]
			await self.send_bot("–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ " + last)
		elif classified == MessageType.ClanHeist_PlanChoose:
			self.set_time("clan_heist", time() + self.parser.clanheist_planchoose(message.text) + 60)
			await self.send_group("–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ –ø–ª–∞–Ω 1")
		elif classified == MessageType.ClanHeist_Started:
			if ", –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ" in text and "—Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç–µ–∫—É—â–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã" in text:
				self.set_time("clan_heist", time() + 600)
				await self.send_bot("–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ")
				return
			lines = text.split("\n")
			for line in lines:
				if ("–±—É–¥–µ—Ç –∏–¥—Ç–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ " in line or "–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ " in line or "–æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —á–µ—Ä–µ–∑" in line) and ":" in line:
					wait = self.parser._convert_time(line.rsplit(" ", 1)[1])
					self.set_time("clan_heist", time() + wait + 60)
		elif classified == MessageType.ClanHeist_Down:
			self.set_time("clan_heist", time() + 3600)
		elif classified == MessageType.ClanHeist_BaseNoPlan:
			self._logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω")
			clan_time = message.text.rsplit(" ", 1)[1]
			if ":" in clan_time:
				self.set_time("clan_heist", time() + self.parser._convert_time(clan_time))
			await self.send_group("–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ –ø–ª–∞–Ω 1")
			await self.send_group("–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ –ø–ª–∞–Ω 1")
		elif classified == MessageType.ClanHeist_BaseWaiting:
			if ", –≤ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º" in message.text:
				self.set_time("clan_heist", time() + 3600)
				return
			self.set_time("clan_heist", time() + 600)
			await self.send_bot("–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç")


class ClanWar(BaseHandler):
	__map__ = {
		"ClanWar_*": "CW_MAIN"
	}

	async def CW_MAIN(self, message, classified):
		if not self.settings.get("clan_war"):
			return

		if classified == MessageType.ClanWar_NotStarted:
			await self.send_bot("–ö–≤ —Å—Ç–∞—Ä—Ç")
			self.set_time("clan_war", time() + 60)
		elif classified == MessageType.ClanWar_SearchStarted:
			self.set_time("clan_war", time() + 1800)
		elif classified == MessageType.ClanWar_UNDEF0:
			self.set_time("clan_war", time() + 3600)
			self.set_time("clan_war_upgrade", 0)
		elif classified == MessageType.ClanWar_Collect:
			self.set_time("clan_war", time() + self.parser.lastline_time(message.text) + 60)
			self.set_time("clan_war_upgrade", 0)
		elif classified == MessageType.ClanWar_FinalFight:
			wtime, points = self.parser.clanwar_parse(message.text)
			self.set_time("clan_war", time() + wtime + 60)
			if points and "–¥–æ—Å—Ç—É–ø–Ω–æ –æ—á–∫–æ–≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π" in message.text:
				for st in self.parser.clanwar_parsepoints(message.text):
					await self.send_bot(st)
				self.set_time("clan_war_upgrade", 0)
			else:
				self.set_time("clan_war_upgrade", time() + wtime - 600)
		elif classified == MessageType.ClanWar_FinalWait:
			wtime, _ = self.parser.clanwar_parse(message.text)
			self.set_time("clan_war", time() + wtime + 60)
			self.set_time("clan_war_upgrade", 0)


class OpenCase(BaseHandler):
	__map__ = {
		"OpenCase_*": "OC_MAIN"
	}

	async def OC_MAIN(self, message, classified):
		if not self.settings.get("opencase"):
			return

		if classified == MessageType.OpenCase_Voids:
			self._logger.info("–ù–µ –º–æ–≥—É –æ—Ç–∫—Ä—ã—Ç—å –º–∞–∫—Å–∏–º—É–º –∫–µ–π—Å–æ–≤. –£–±–∏—Ä–∞—é —á–∏—Å–ª–æ")
			self.profile.additional_info["opencase_limit"] = True
			self.set_time("opencase", time() + gen_time("opencase"))
		elif classified == MessageType.OpenCase_Info:
			self.set_time("opencase", time() + gen_time("opencase"))
			self.profile.additional_info["opencase"] = self.parser.opencase_parse(message.text)
		elif classified == MessageType.OpenCase_NoCases:
			del self.profile.additional_info["opencase"]
		elif classified == MessageType.OpenCase_4Got:
			self.set_time("opencase", time() + gen_time("opencase"))
		elif classified == MessageType.OpenCase_GotCase:
			if not self.profile.additional_info.get("opencase"):
				self.profile.additional_info["opencase"] = 1


class AutoMation(BaseHandler):
	__map__ = {
		"AutoTrade_*": "auto_trade",
		"AutoCup_*": "auto_cup",
		"AutoCasino_*": "auto_casino"
	}

	async def auto_trade(self, _, classified):
		if not self.settings.get("auto_trade"):
			return

		if classified == MessageType.AutoTrade_Earned:
			self.set_time("trade", time() + gen_time("trade") + 1)
			await self.send_bot("–ë–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å –≤—Å—ë")
		elif classified == MessageType.AutoTrade_Lost:
			self.set_time("trade", time() + gen_time("trade"))

	async def auto_cup(self, _, classified):
		if not self.settings.get("auto_cup"):
			return

		if classified == MessageType.AutoCup_True:
			self.set_time("cup", time() + gen_time("cup") + 1)
			await self.send_bot("–ë–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å –≤—Å—ë")
		elif classified == MessageType.AutoCup_False:
			self.set_time("cup", time() + gen_time("cup"))

	async def auto_casino(self, _, classified):
		if not self.settings.get("auto_casino"):
			return

		if classified == MessageType.AutoCasino_Win:
			self.set_time("casino", time() + gen_time("casino") + 1)
			await self.send_bot("–ë–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å –≤—Å—ë")
		elif classified == MessageType.AutoCasino_Lost:
			self.set_time("casino", time() + gen_time("casino"))


class AutoProgress(BaseHandler):
	__map__ = {
		"AutoProgress_MaxFarms": "max_farms",
		"AutoProgress_BoughtFarms": "bought_farms",
	}

	async def max_farms(self, _, classified):
		if not self.settings.get("progress"):
			return
		self.profile.btcminer.count = 1000
		await self.send_bot("–ü—Ä–æ—Ñ–∏–ª—å")

	async def bought_farms(self, message, classified):
		text = message.text.replace(" —à—Ç.", "")
		start = text.find("(")
		end = text.find(")")
		amount = int(text[start+1:end])
		self.profile.balance -= amount * BITCOIN_FARM_PRICE
		self.profile.btcminer.count += amount

class Works(BaseHandler):

	__map__ = {
		"Works_*": "autoelevate_handler",
		"Works_Time": "worktime_handler",
		"Works_DayEnd": "worktime_handler"
	}

	async def worktime_handler(self, message, classified):
		if classified == MessageType.Works_Time:
			self._logger.info("Parsing job")
			job_time = self.parser.works_parsejob(message.text)
			if not job_time:
				return
			self.set_time("work", time() + job_time + gen_time("work"))
		elif classified == MessageType.Works_DayEnd:
			self.set_time("work", time() + gen_time("work"))
			if "–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞" in message.text:
				await self.autoelevate_handler(message, MessageType.Works_NewJob)

	async def autoelevate_handler(self, message, classified):
		if not self.settings.get("work"):
			return

		if classified == MessageType.Works_NewJob:
			self.profile.additional_info["new_job"] = True
			await self.send_bot("–£–≤–æ–ª–∏—Ç—å—Å—è")
			await self.send_bot("–†–∞–±–æ—Ç–∞")
		elif classified == MessageType.Works_JobList:
			self.profile.additional_info["new_job"] = True
			active = message.text.split("\n")[0].rsplit(" ")[-4]
			await self.send_bot("–†–∞–±–æ—Ç–∞ " + active)
		elif classified == MessageType.Works_JobInJobList:
			del self.profile.additional_info["new_job"]
			text = message.text
			lines = text.split("\n")
			line_len = len(lines) - 2
			if line_len < 1:
				line_len = 1
			await self.send_bot("–†–∞–±–æ—Ç–∞ " + str(line_len))
		elif classified == MessageType.Works_NoJob:
			self.profile.additional_info["new_job"] = True
			await self.send_bot("–†–∞–±–æ—Ç–∞")
		elif classified == MessageType.Works_UNDEF0:
			reply_id = 0
			line = message.text.split("\n")[1]
			start = line.find("¬´")
			need = line[start + 1:-1]
			for row in message.reply_markup.rows:
				buttons = row.buttons
				for but in buttons:
					text = but.text
					if text == need:
						await asyncio.sleep(.5)
						await message.click(reply_id)
						break
					reply_id += 1


class Pets(BaseHandler):
	__map__ = {
		"Pets_*": "Pets_MAIN",
		"Pets_Shop": "petshop_handler"
	}

	async def petshop_handler(self, message, classified):
		self._logger.info("Parsing petshop")
		self.parser.petshop_parse(message.text)

	async def Pets_MAIN(self, message, classified):
		msg = self.profile.additional_info.get("pets_waiting")
		if not msg:
			return

		if classified == MessageType.Pets_NoPets:
			del self.profile.additional_info["pets_waiting"]
			del self.profile.additional_info["pets_parsed"]
			await utils.answer(msg, "–ü–∏—Ç–æ–º—Ü–µ–≤ –Ω–µ—Ç—É")
		elif classified == MessageType.Pets_Page:
			text = message.text
			line = message.text.split("\n")[0]
			page_info = line.rsplit(" ", 1)[1]
			page_info = page_info[1:-2]
			self._logger.info("now - %s - %i", str(page_info), len(page_info))
			page_info = page_info.split("/")
			cur_page = page_info[0]
			arr = self.parser.pets_parse(message.text)
			self.profile.additional_info["pets_parsed"] = arr

			if cur_page == page_info[1]:
				print("got pets")
				arr = self.profile.additional_info.get("pets_parsed")
				reply = "<b>üêæ –¢–æ–ø –ø–∏—Ç–æ–º—Ü—ã</b>"
				for info in arr:
					reply = reply + "\n" + "üÜî " + info.get("ID") + " | ‚ù§Ô∏è " + \
						str(info.get("HP")) + " | üî´ " + str(info.get("DMG"))
				await utils.answer(msg, reply)
				del self.profile.additional_info["pets_waiting"]
				del self.profile.additional_info["pets_parsed"]
			else:
				print("getting to next page")
				await self.send_bot("–ü–∏—Ç–æ–º—Ü—ã " + str(int(cur_page) + 1))


class Clans(BaseHandler):
	__map__ = {
		"Clan_*": "Clans_MAIN"
	}

	async def Clans_MAIN(self, _, classified):
		if classified == MessageType.Clan_Joined:
			self.profile.clan = True
		elif classified == MessageType.Clan_Joined:
			await self.send_bot("–ö–ª–∞–Ω –ø—Ä–∏–Ω—è—Ç—å")
		elif classified == MessageType.Clan_MultipleInvite:
			await self.send_bot("–ö–ª–∞–Ω –ø—Ä–∏–Ω—è—Ç—å 1")


class AutoBuy(BaseHandler):
	__map__ = {
		"AutoBuy_*": "AB_MAIN"
	}

	async def AB_MAIN(self, message, classified):
		if classified == MessageType.AutoBuy_Message:
			msg = self.profile.additional_info.get("need_to_buy")
			del self.profile.additional_info["need_to_buy"]
			lines = message.text.split("\n")
			for line in lines:
				dot = line.find(".")
				if line[:1] == "üî∏" and dot != -1:
					await self.send_bot("–ü—Ä–µ–¥–º–µ—Ç—ã " + line[2:dot])
			if msg:
				await msg.reply("–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ")
		elif classified == MessageType.AutoBuy_NoClan:
			msg = self.profile.additional_info.get("need_to_buy")
			del self.profile.additional_info["need_to_buy"]
			if msg:
				await msg.reply("–î–µ–±–∏–ª, –º–µ–Ω—è –≤ –∫–ª–∞–Ω–µ –Ω–µ—Ç—É")


class Money(BaseHandler):
	__map__ = {
		"Bonus_*": "bonus_handler",
		"BalanceInfo": "balance_handler",
		"MoneyTransactions_*": "transactions_handler",
		"WorkMoney_*": "transactions_handler"
	}

	async def bonus_handler(self, message, classified):
		if classified == MessageType.Bonus_Message:
			bonus_type, wtime = self.parser.bonus_parsebonus(message.text)
			self.set_time(bonus_type, time() + wtime + 30)
		elif classified == MessageType.Bonus_MoneyMessage:
			self.set_time("premium_money", time() + self.parser.bonus_parsemoney(message.text) + 30)
		elif classified == MessageType.Bonus_MoneyGiveMessage:
			self.set_time("deluxe_give", time() + self.parser.bonus_parsemoney(message.text) + 30)

	async def balance_handler(self, message, classified):
		if classified == MessageType.BalanceInfo:
			self.profile.balance, self.profile.bitcoin_balance = self.parser.parse_balance2(
				message.text)
			self.profile.in_bank = self.parser.parse_in_bank(message.text)

	async def transactions_handler(self, message, _):
		await message.respond("–ë–∞–ª–∞–Ω—Å")


class ChatCommands(BaseHandler):
	__map__ = {
		"ChatCommands_*": "chatcommands_handler"
	}

	async def chatcommands_handler(self, message, classified):
		_logger = logging.getLogger("LesyaAuto::ChatCommands")

		_logger.info("ChatCommands - got")

		chat, user = message.chat.id, message.sender_id
		if chat != LOGCHANNEL_CHATID: # –•–µ–∫—Å–∫–æ–¥ –Ω–∞ –ø—Ä–∏–∫–æ–ª–µ, —Ö–æ—á–µ—Ç, —á—Ç–æ–±—ã –Ω–∞–º –±–æ—Ç –¥–∞–≤–∞–ª —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
			_logger.info("Invalid channel for ChatCommands")
			return

		_logger.info("Checking message")

		if user == LESYA_CHATID:
			if classified == MessageType.ChatCommands_PlanChoosed:
				if not self.settings.get("clan_buy"):
					return

				self.profile.additional_info["need_to_buy"] = message
				await self.send_bot("–ü—Ä–µ–¥–º–µ—Ç—ã")
			return

		if classified == MessageType.ChatCommands_Ban:
			if baninfo := self._mod._temp_db["banned"]:  # pylint: disable=protected-access
				await utils.answer(message,
								   "<b>[LesyaAuto]</b> –Ø –≤ –±–∞–Ω–µ, –æ—Å—Ç–∞–ª–æ—Å—å —Å–∏–¥–µ—Ç—å: %s" %
								   str(timedelta(seconds=floor(baninfo.release_time - time()))))
			else:
				await utils.answer(message, "[LesyaAuto] –ë–∞–Ω–∞ –Ω–µ—Ç")
		elif classified == MessageType.ChatCommands_Buy:
			self.profile.additional_info["need_to_buy"] = message
			await self.send_bot("–ü—Ä–µ–¥–º–µ—Ç—ã")
		elif classified == MessageType.ChatCommands_Ping:
			text = "[LesyaAuto]\n" \
				   "- –°—Ç–∞—Ç—É—Å: <b>alive</b>\n" \
				   "- –ê–π–¥–∏ —É –±–æ—Ç–∞: <code>%i</code>\n" \
				   "- –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥—É–ª–µ–π (%i):\n" \
				   "%s" \
				   "\n\n<b>Powered by TheHub</b>"

			modules_list = "\n".join((" - <code>%s</code>" % x.__name__ for x in ACTIVE_MODULES))
			await utils.answer(message,
							   text % (self.profile.uid, len(ACTIVE_MODULES), modules_list))
		elif classified == MessageType.ChatCommands_Promo:
			await utils.answer(message, "–ü—Ä–æ–º–æ %s" % (message.text[7:]))


ACTIVE_MODULES = [AutoFight, ClanHeist, ClanWar, OpenCase, AutoMation, Works, Pets, Clans,
				  AutoBuy, Money, ChatCommands, AutoProgress]


def timetostr(tmp):
	if tmp <= 0:
		return "–ì–æ—Ç–æ–≤–æ"
	return str(timedelta(seconds=floor(tmp)))


class LesyaMod(loader.Module):
	"""–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è LesyaBot"""
	strings = {
		"name": "LesyaAuto"
	}

	parser: LesyaParser  # –ø–∞—Ä—Å–µ—Ä
	classifier: LesyaClassifier  # –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
	_temp_db = {  # –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
		"profile": None,
		"banned": None,
		"captcha": None
	}
	_handlers_table = {}
	_locks = {
		"captcha": asyncio.Lock(),  # –±–ª–æ–∫–∏—Ä–æ–≤–æ—á–∫–∞ –Ω–∞ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á
		"profile_get": asyncio.get_event_loop().create_future()  # —á—Ç–æ–±—ã –∂–¥–∞—Ç—å –ø–æ–∫–∞ –∏–Ω—Ñ–∞ –ø—Ä–∏–¥—ë—Ç
	}
	_client = None  # –∫–ª–∏–µ–Ω—Ç —Ç–µ–ª–µ—Ç–æ–Ω–∞
	_db = None  # –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –§–¢–ì
	_me = None  # –∫—Ç–æ —è
	_settings = {  # –Ω–∞—Å—Ç—Ä–æ–µ—á–∫–∏ –ª—É—á—à–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç—É—Ç, —Ç.–∫. –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∫ –±–æ—Ç—É + –±—É–¥–µ–º –º–µ–Ω—è—Ç—å
		"fight": True,
		"work": True,
		"bonus": True,
		"opencase": True,
		"progress": True,
		"pet_bitcoin": True,
		# "pet_stimulator": True,
		# "pet_food": True,
		# "pet_cases": True,
		"clan_buy": True,
		"humanizer": True
	}
	_times = {  # —ç—Ç–æ —Ç–æ–∂–µ —Å–∫–æ–ø–∏—Ä—É—é. –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫—Ä—É—á–µ, –Ω–æ —Å–ª–æ–∂–Ω–µ–µ –∏ –¥–æ–ª—å—à–µ
		"bot_lag": 0,

		"bonus": 0,
		"vip_bonus": 0,
		"premium_bonus": 0,
		"premium_money": 0,
		"deluxe_bonus": 0,
		"deluxe_give": 0,

		"work": 0,
		"fight": 0,

		"opencase": 0,

		"progress": 0,
		"progress_collect": 0,

		"pet_bitcoin": 0,
		"pet_stimulator": 0,
		"pet_food": 0,
		"pet_cases": 0,

		"clan_war": 0,
		"clan_war_upgrade": 0,
		"clan_heist": 0,

		"trade": 0,
		"cup": 0,
		"casino": 0,

		"humanizer": 0
	}
	sleep_hours = {}

	def __init__(self):
		self.parser = LesyaParser(self._temp_db)
		self.classifier = LesyaClassifier(self._temp_db)
		self._handlers_table = {
			MessageType.ProfileInfo: self.handle_profile,
			MessageType.Captcha: self.handle_captcha,
			MessageType.Captcha_bruted: self.handle_captcha_bruted,
			MessageType.BannedNotification: self.handle_banned
		}

		modules = (mod(self) for mod in ACTIVE_MODULES)
		for mod in modules:
			for k, v in mod.__compiled_map__.items():
				if k in self._handlers_table:
					logger.fatal("Collision with %s module and %s module in %s. Skipping...",
								 self._handlers_table[k].__self__.__class__.__name__,
								 mod.__class__.__name__, k)
					continue
				self._handlers_table[k] = v

		self._loop = asyncio.get_event_loop()

	def __getattr__(self, attrname):
		if attrname == "profile":
			return self._temp_db["profile"]
		raise AttributeError(attrname)

	def bot_loaddb(self):
		# –ü–æ–¥–≥—Ä—É–∑–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
		global LOGCHANNEL_CHATID
		LOGCHANNEL_CHATID = int(self.db_get("chat_id", 1462806544) or LOGCHANNEL_CHATID)
		# –õ—É—á—à–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞—Ä—É –ª–∏—à–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —á–µ–º –ª–æ–≤–∏—Ç—å —Ñ–ª—É–¥–≤–µ–π—Ç/–±–∞–Ω –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		#for time_name in self._times:
		#	last = self.db_get("time_" + time_name, 0)
		#	self._times[time_name] = last
		# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ lsettings
		for cmd in settings_tip:
			has = self.db_get(cmd)
			self._settings[cmd] = has
		# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É–ª–ª–¥–∞—É–Ω–æ–≤
		global COOLDOWNS
		for mode in COOLDOWNS:
			wait = self.db_get("cooldown_" + mode)
			if wait is None:
				continue
			COOLDOWNS[mode] = wait
		# –í—Ä–µ–º—è —Å–Ω–∞
		sleep = self.db_get("sleep_hours")
		if sleep:
			self.sleep_hours = sleep
		global settings_phrases
		for phrase in settings_phrases:
			text = self.db_get("phrase_" + phrase)
			if text is None:
				continue
			settings_phrases[phrase] = text

	async def client_ready(self, client, db):
		self._client = client
		self._db = db
		self._me = await client.get_me()
		self._me_id = self._me.id

		self.bot_loaddb()
		asyncio.ensure_future(self.sw_timer0())

	async def null_handler(self, _, message_type):
		logger.error("No handler found for %s", message_type)

	async def handle_profile(self, message, _):
		self._temp_db["profile"] = self.parser.parse_account_info(message.text)
		logger.info("Parsed profile id %i", self.profile.uid)
		if not self._locks["profile_get"].done():  # –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∂–¥—ë—Ç –∏–Ω—Ñ—É –ø–æ –ø—Ä–æ—Ñ–∏–ª—É, —Ä–∞–∑–ª–æ—á–∏–≤–∞–µ–º
			self._locks["profile_get"].set_result(True)
			self._locks["profile_get"] = self._loop.create_future()

		captcha_num = self._temp_db.get("captcha")
		if captcha_num == 0:
			self._temp_db["captcha"] = 1

	async def brute_captcha(self):
		captcha_num = self._temp_db.get("captcha")
		await self.send_group("async def brute_captcha - " + str(captcha_num))
		if captcha_num == 0:
			await self.send_bot("–ü—Ä–æ—Ñ–∏–ª—å")
			await self.send_group("–ó–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Ñ–∏–ª—å")
			return
		text = (
			captcha_num == 1 and self.profile.name or
			captcha_num == 2 and self.profile.balance or
			captcha_num == 3 and self.profile.in_bank or
			captcha_num == 4 and self.profile.bitcoin_balance or
			captcha_num == 5 and self.profile.btcminer.count
			)

		if text:
			await self.send_group("–û—Ç–ø—Ä–∞–≤–ª—è—é #" + str(captcha_num))
			self._temp_db["captcha"] = captcha_num + 1
			await self.send_bot(str(text))

	async def handle_captcha(self, message, _):
		# –±–ª–æ–∫–∏—Ä—É–µ–º –º—É—Ç–µ–∫—Å —á—Ç–æ–±—ã —Ç–∞–π–º–µ—Ä –Ω–µ –Ω–∞—á–∞–ª –ø—É–∫–∞—Ç—å, –ø–æ–∫–∞ –∫–∞–ø—á–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞
		captcha_num = self._temp_db.get("captcha")
		if captcha_num == None:
			self._temp_db["captcha"] = 0 # –ó–∞–ø—Ä–æ—Å–∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–Ω—Ñ—ã
			captcha_num = 0
			await self.send_group("–ú–Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏ –∫–∞–ø—á—É. –ü—ã—Ç–∞—é—Å—å —Å–±—Ä—É—Ç–∏—Ç—å")
			await self._client.forward_messages(LOGCHANNEL_CHATID, message)
			await self.brute_captcha(message)

		if captcha_num > 5:
			await self.send_group("–ö–∞–∂–∏—Å—å, –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –∫–∞–ø—á–µ. 5 –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–µ–±–∞–ª. –ë–æ–ª—å—à–µ –Ω–µ –æ—Ç—Å—ã–ª–∞—é")
			await self._client.forward_messages(LOGCHANNEL_CHATID, message)
			return

	async def handle_captcha_bruted(self, message, _):
		await self.send_group("–£—Å–ø–µ—à–Ω–æ —Å–±—Ä—É—Ç–∏–ª –∫–∞–ø—á—É")
		del self._temp_db["captcha"]

	async def handle_banned(self, message, _):
		logger.info("Received ban notification")
		baninfo = self.parser.parse_ban(message.text)
		self._temp_db["banned"] = baninfo
		if baninfo.permanent:
			text = "–Ø —É–ª–µ—Ç–µ–ª –≤ –ø–µ—Ä–º–∞—á(("
		else:
			text = f"–Ø —É–ª–µ—Ç–µ–ª –≤ –±–∞–Ω –Ω–∞ {str(timedelta(seconds=floor(baninfo.ban_time)))}"
		if baninfo.reason:
			reason = f"–ü—Ä–∏—á–∏–Ω–∞: {baninfo.reason}"
		else:
			reason = "–ü–æ –±–µ—Å–ø—Ä–µ–¥–µ–ª—É —Å—É–∫–∏ –∑–∞–∫—Ä—ã–ª–∏"
		await self.send_group(f"#BAN\n<b>[LesyaAuto]</b> {text}\n{reason}")

	async def process_message(self, message, by_bot):
		global LESYA_LAG
		message.text = message.text.lower()

		message_type = self.classifier.classify_message(message.text)
		logger.info("Received message type %s", message_type)

		# –µ—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç –∏–Ω—Ñ—ã –æ –ø—Ä–æ—Ñ–∏–ª–µ, —Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å –∏–Ω—Ñ–æ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ,
		# –æ –±–∞–Ω–µ, –∏–ª–∏ –∫–∞–ø—á–∏
		global_handlers = message_type in [MessageType.ProfileInfo, MessageType.BannedNotification, MessageType.Captcha]
		if (not self._temp_db.get("profile") and not global_handlers) or (global_handlers and not by_bot):
			return

		if by_bot: # –ì–æ–≤–Ω–æ –Ω–µ –ª–∞–≥–∞–µ—Ç
			LESYA_LAG = 0
			self._times["bot_lag"] = 0

		# —á–µ–∫–∞–µ–º –Ω–∞ –±–∞–Ω
		if self._temp_db["banned"] and self._temp_db["banned"].release_time > time():
			return

		# —á–µ–∫–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –∏ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –Ω–∞—à —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–µ—Ä–µ–¥–∞—ë–º –µ–º—É
		# —Ä—É–ª—å, –∞ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ, –æ—Ç–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ null_handler, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –¥–µ–ª–∞–µ—Ç –Ω–∏—á–µ–≥–æ,
		# —Ç–æ–ª—å–∫–æ –ø—É–∫–∞–µ—Ç –≤ –ª–æ–≥, —á—Ç–æ –ø–æ–ª—É—á–∏–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
		await self._handlers_table.get(message_type, self.null_handler)(message, message_type)

	async def get_bitcoins(self):
		now = time()
		if not self._settings.get("pet_bitcoin") or self._times.get("pet_bitcoin") > now:
			return
		self.set_time("pet_bitcoin", now + 60 * 61)
		await self.send_bot("–§–µ—Ä–º–∞")

	async def lesyapingcmd(self, message):
		if not self.profile:
			await utils.answer(message, "–ï—â—ë –Ω–µ—Ç –∏–Ω—Ñ—ã")
			return
		text = "[LesyaAuto]\n" \
			"- –°—Ç–∞—Ç—É—Å: <b>alive</b>\n" \
			"- –ê–π–¥–∏ —É –±–æ—Ç–∞: <code>%i</code>\n" \
			"- –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥—É–ª–µ–π (%i):\n" \
			"%s" \
			"\n\n<b>Powered by TheHub</b>"

		modules_list = "\n".join(("   ‚Ä¢ <code>%s</code>" % x.__name__ for x in ACTIVE_MODULES))
		await utils.answer(message,
						   text % (self.profile.uid, len(ACTIVE_MODULES), modules_list))

	async def lsetchatcmd(self, message):
		global LOGCHANNEL_CHATID
		LOGCHANNEL_CHATID = int(message.chat.id)
		self.db_set("chat_id", LOGCHANNEL_CHATID)
		await utils.answer(message, "–≠—Ç–∞ –±–µ—Å–µ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∫–∞–∫ —á–∞—Ç –∫–ª–∞–Ω–∞")

	async def ltestchatcmd(self, message):
		try:
			await self._client.send_message(LOGCHANNEL_CHATID, "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Ç–∞")
			await utils.answer(message, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
		except:
			await utils.answer(message, "–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ, —É–∫–∞–∑–∞–Ω —á–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")

	async def lcmdcmd(self, message):
		"""–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"""
		if message.chat.id != LOGCHANNEL_CHATID:
			return
		cmd = utils.get_args_raw(message) or ""
		text = cmd.lower()
		allow = False
		for word in allowed_commands:
			last = word[-1:]
			if last == "*":
				check_len = len(word) - 1
				sub = word[:check_len]
				msg_sub = text[:check_len]
				if sub == msg_sub:
					allow = True
			elif text == word:
				allow = True
		if not allow:
			await utils.answer(message, "–ö—ã—à")
			return
		await utils.answer(message, cmd)

	async def lsleepcmd(self, message):
		"""–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞. –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –¥–∞—ë—Ç –∏–Ω—Ñ—É"""
		text = utils.get_args_raw(message) or ""
		args = text.rsplit(" ", 2)
		if not args or not args[0]:
			reply = "<b>üò¥ –í—Ä–µ–º—è —Å–Ω–∞. –°–µ–π—á–∞—Å - " + str(strftime("%H")) + "</b>"
			for name in self.sleep_hours:
				hours = self.sleep_hours.get(name)
				reply = reply + "\n‚è∞ <code>" + name + "</code>: " + str(hours[0] or 0) + "—á -> " + str(hours[1] or 0) + "—á"
			reply = reply + "\n\n<b>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ - </b><code>.lsleep –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å_–Ω–∞—á–∞–ª–æ —á–∞—Å_–∫–æ–Ω–µ—Ü</code>\n<b>–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è - </b><code>.lsleep –Ω–∞–∑–≤–∞–Ω–∏–µ</code>"
			await utils.answer(message,reply)
		elif len(args) == 3: # –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü
			name = args[0]
			if self.sleep_hours.get(name):
				await utils.answer(message, "–¢–∞–∫–æ–µ –∏–º—è —É–∂–µ –µ—Å—Ç—å")
				return
			try:
				hour_start = int(args[1])
				hour_end = int(args[2])
			except:
				await utils.answer(message, "–ß–∞—Å—ã –æ—Ç–¥—ã—Ö–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã —á–∏—Å–ª–æ–º")
				return
			if hour_start >= hour_end:
				await utils.answer(message, "–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ ( 4, 7 - –æ—Ç–¥—ã—Ö –æ—Ç 4 –¥–æ 7 —É—Ç—Ä–∞ )")
				return
			self.sleep_hours[name] = [hour_start, hour_end]
			self.db_set("sleep_hours", self.sleep_hours)
			await utils.answer(message, "–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
		elif len(args) == 1:
			name = args[0]
			if not self.sleep_hours.get(name):
				await utils.answer(message, "–¢–∞–∫–æ–≥–æ –∏–º–µ–Ω–∏ –Ω–µ—Ç—É")
				return
			del self.sleep_hours[name]
			self.db_set("sleep_hours", self.sleep_hours)
			await utils.answer(message, "–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ —É–¥–∞–ª–µ–Ω–æ")
		else:
			await utils.answer(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. <code>.lsleep –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å_–Ω–∞—á–∞–ª–æ —á–∞—Å_–∫–æ–Ω–µ—Ü</code>")

	def phrases_set(self, phrase, text):
		global settings_phrases
		settings_phrases[phrase] = text
		self.db_set("phrase_" + phrase, text)

	async def lphrasescmd(self, message):
		"""–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏"""
		text = utils.get_args_raw(message) or ""
		args = text.split(" ", 1)
		has_phrase = settings_phrases.get(args[0])
		if not args or len(args) < 2 or not has_phrase:  # –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ / –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
			reply = "<b>üí¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ—Ä–∞–∑</b>"
			for name in settings_phrases:
				value = settings_phrases.get(name)
				reply = reply + "\n<code>" + name + \
					"</code> (<code>" + phrases_tips.get(name) + "</code>) - <code>" + value + "</code>"
			await utils.answer(message, reply)
		elif len(args) == 2 and has_phrase:
			self.phrases_set(args[0], args[1])
			await utils.answer(message, "<code>" + args[0] + "</code> - <code>" + args[1] + "</code>")

	async def lbotreadycmd(self, message):
		"""–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥ –±–æ—Ç–∞"""
		for func in best_settings:
			should = best_settings.get(func)
			self.settings_set(func, should)

		await utils.answer(message, "<b>–ü—Ä–∏–º–µ–Ω–µ–Ω—ã –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –±–æ—Ç-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>")

	def set_cooldown(self, mode, seconds):
		global COOLDOWNS
		COOLDOWNS[mode] = seconds
		self.db_set("cooldown_" + mode, seconds)

	async def lcooldowncmd(self, message):
		"""–£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏"""
		text = utils.get_args_raw(message)
		if not text:
			reply = "<b>‚åõ –ò–Ω—Ñ–æ–º–∞—Ü–∏—è –æ –∑–∞–¥–¥–µ—Ä–∂–∫–∞—Ö</b>"
			for cd in COOLDOWNS:
				name = cooldowns_hints.get(cd) or "Unknown"
				wait = COOLDOWNS.get(cd) or 0
				reply = reply + "\n<b>" + name + "</b> ( <code>" + cd + "</code> ) - " + timetostr(wait)

			reply = reply + "\n\n<b>üí¨ –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ</b> <code>.lcooldown type time</code>"
			await utils.answer(message, reply)
			return
		args = text.rsplit(" ", 1)
		mode = args[0]
		if len(args) != 2 or not mode in COOLDOWNS:
			await utils.answer(message, "<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! .lcooldown type seconds</b>")
			return
		time = args[1]
		try:
			cd_time = int(time)
		except ValueError:
			await utils.answer(message, "<b>–û—à–∏–±–∫–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞ \"s\", –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –≤—Ç–æ—Ä—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º)</b>")
			return
		if cd_time < 0:
			await utils.answer(message, "<b>–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω–æ 0 –∏–ª–∏ –±–æ–ª—å—à–µ</b>")
			return
		self.set_cooldown(mode, cd_time)
		await utils.answer(message, "<b>–ï—Å—Ç—å!</b>")

	async def lsettingscmd(self, message):
		"""–ù–∞—Å—Ç—Ä–æ–π–∫–∏ LesyaBot"""
		text = utils.get_args_raw(message)
		reply = ""
		if not text or not settings_tip.get(text):
			reply = "‚öôÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>"
			for cmd in settings_tip:
				enabled = self._settings.get(cmd) and "‚ôøÔ∏è" or ""
				description = settings_tip[cmd]
				reply = reply + "\n" + enabled + description + " - <code>" + cmd + "</code>"

			reply = reply + "\n\n" + "<b>‚ôø - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞\n–§—É–Ω–∫—Ü–∏–∏ —Å –ø—Ä–∏–ø–∏—Å–∫–æ–π</b>\n\n<b>–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–≤–∫–ª—é—á–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ</b> <code>.lsettings var_name</code>"
		else:
			description = settings_tip.get(text)
			should = not self._settings.get(text)
			reply = description + " - <b>" + (should and "–í–∫–ª—é—á–µ–Ω–æ" or "–û—Ç–∫–ª—é—á–µ–Ω–æ") + "</b>"
			self.settings_set(text, should)

		await utils.answer(message, reply)

	async def lpetscmd(self, message):
		"""–°–ø–∏—Å–æ–∫ –ø–∏—Ç–æ–º—Ü–µ–≤. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É—Ä–æ–Ω—É"""
		if not self.profile:
			await utils.answer(message, "–ù–µ—Ç—É –∏–Ω—Ñ—ã –æ –ø—Ä–æ—Ñ–∏–ª–µ")
			return
		self.profile.additional_info["pets_waiting"] = message
		self.profile.additional_info["pets_parsed"] = []
		await utils.answer(message, "–ñ–¥—É –∏–Ω—Ñ—É –æ—Ç –±–æ—Ç–∞")
		await self.send_bot("–ü–∏—Ç–æ–º—Ü—ã")

	async def lesyainfocmd(self, message):
		"""–ò–Ω—Ñ–æ—Ñ—Ä–º–∞—Ü–∏—è –æ —Å–∫—Ä–∏–ø—Ç–µ –∏ –∏–Ω—Ñ–µ, –∫–∞–∫—É—é —Å–æ–±—Ä–∞–ª"""
		now = time()
		if baninfo := self._temp_db["banned"]:  # pylint: disable=protected-access
			await utils.answer(message,
							   "<b>[LesyaAuto]</b> –Ø –≤ –±–∞–Ω–µ, –æ—Å—Ç–∞–ª–æ—Å—å —Å–∏–¥–µ—Ç—å: %s" %
							   str(timedelta(seconds=floor(baninfo.release_time - time()))))
			return
		if not self.profile:
			await utils.answer(message, "–ù–µ—Ç—É –∏–Ω—Ñ—ã –æ –ø—Ä–æ—Ñ–∏–ª–µ")
			return

		text = "<b>–ò–Ω—Ñ–∞ –≤ –ë–æ—Ç –õ–µ—Å—è</b>" + "\n" \
			"‚ò∫Ô∏è –ú–æ–π –∞–π–¥–∏ - <code>" + str(self.profile.uid) + "</code>\n" \
			"ü§î –°—Ç–∞—Ç—É—Å: " + str(STATUS_UNMAP.get(self.profile.status) or self.profile.status) + "\n" \
			"üë®‚Äçüë¶‚Äçüë¶ –ö–ª–∞–Ω: " + (self.profile.clan and "–ï—Å—Ç—å" or "–ù–µ—Ç—É") + "\n" \
			"üí≥ –î–µ–Ω—å–≥–∏: " + "{:0,}".format(self.profile.balance) + "$" + "\n" \
			"üÖ±Ô∏è –ë–∏—Ç–∫–æ–∏–Ω—ã: " + "{:0,}".format(self.profile.bitcoin_balance) + "BTC" + "\n" \
			"üíª –§–µ—Ä–º—ã: " + "{:0,}".format(self.profile.btcminer.count) + "\n\n" \
			"<b>–ò–Ω—Ñ–∞ –ø–æ —Ç–∞–π–º–∏–Ω–≥–∞–º</b>" + "\n" \
			"üí∞ –ë–æ–Ω—É—Å: " + timetostr(self._times.get("bonus") - now) + "\n"
		if self.profile.status == LesyaAccountStatus.VIP or self.profile.status == LesyaAccountStatus.Premium or self.profile.status == LesyaAccountStatus.Deluxe:
			text = text + "üíµ –í–∏–ø –±–æ–Ω—É—Å: " + timetostr(self._times.get("vip_bonus") - now) + "\n"
		if self.profile.status == LesyaAccountStatus.Premium or self.profile.status == LesyaAccountStatus.Deluxe:
			text = text + "üí∂ –ü—Ä–µ–º–∏—É–º –±–æ–Ω—É—Å: " + timetostr(self._times.get("premium_bonus") - now) + "\n"
			text = text + "ü§ë –ü—Ä–µ–º–∏—É–º –≤–∞–ª—é—Ç–∞: " + timetostr(self._times.get("premium_money") - now) + "\n"
		if self.profile.status == LesyaAccountStatus.Deluxe:
			text = text + "üí∑ –î–µ–ª—é–∫—Å –±–æ–Ω—É—Å: " + timetostr(self._times.get("deluxe_bonus") - now) + "\n"
			text = text + "üè¶ –í—ã–¥–∞—á–∞ –¥–µ–Ω–µ–≥: " + timetostr(self._times.get("deluxe_bonus") - now) + "\n"
		text = text + "üõ†Ô∏è –†–∞–±–æ—Ç–∞: " + timetostr(self._times.get("work") - now) + "\n"
		battle = self._times.get("fight") - now
		if battle < 10**50:
			text = text + "ü§∫ –ë–æ–∏: " + timetostr(battle) + "\n"
		if self._settings.get("progress"):
			text = text = text + "üÖ±Ô∏è –°–±–æ—Ä –±–∏—Ç–∫–æ–∏–Ω–æ–≤: " + timetostr(self._times.get("progress_collect") - now) + "\n"
		if self._settings.get("pet_stimulator"):
			text = text + "üíä –°—Ç–∏–º—É–ª—è—Ç–æ—Ä—ã: " + timetostr(self._times.get("pet_stimulator") - now) + "\n"
		if self._settings.get("pet_food"):
			text = text + "ü•´ –ö–æ—Ä–º: " + \
				timetostr(self._times.get("pet_food") - now) + "\n"
		if self._settings.get("pet_cases"):
			text = text + "üíº –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫–µ–π—Å–æ–≤: " + timetostr(self._times.get("pet_cases") - now) + "\n"
		if self._settings.get("opencase"):
			text = text + "üß≥ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞: " + timetostr(self._times.get("opencase") - now) + "\n"
		if self._settings.get("clan_war"):
			text = text + "‚öîÔ∏è –ö–ª–∞–Ω–æ–≤–∞—è –≤–æ–π–Ω–∞: " + timetostr(self._times.get("clan_war") - now) + "\n"
			if self._times.get("clan_war_upgrade") != 0:
				text = text + "ü¶Ω –ê–ø–≥—Ä–µ–π–¥ –ø–∏—Ç–æ–º—Ü–µ–≤: " + timetostr(self._times.get("clan_war_upgrade") - now) + "\n"
		if self._settings.get("clan_heist"):
			text = text + "üî´ –û–≥—Ä–∞–±–ª–µ–Ω–∏–µ: " + timetostr(self._times.get("clan_heist") - now) + "\n"
		if self._settings.get("humanizer"):
			text = text + "üó£Ô∏è –•—É–º–∞–Ω–∞–π–∑–µ—Ä: " + timetostr(self._times.get("humanizer") - now) + "\n"
		hour = int(strftime("%H"))
		for sleep_name in self.sleep_hours:
			hours = self.sleep_hours.get(sleep_name)
			if hour >= hours[0] and hour <= hours[1]:
				text = text + "üò¥ <b>–°–µ–π—á–∞—Å —Å–ø–ª—é ( " + sleep_name + " ). –ï—â—ë " + str(hours[1] - hour) + "—á</b>"
		if self._times.get("bot_lag") != 0:
			text = text + "üö® <b>–ë–æ—Ç –ª–∞–≥–∞–µ—Ç. –ò–≥–Ω–æ—Ä –µ—â—ë</b> " + timetostr(self._times.get("bot_lag") - now)
		await utils.answer(message, text)

	# —Ç–∞–π–º–µ—Ä
	async def sw_timer0(self):
		while True:  # –¥–∞ –ø—Ä–æ—Å—Ç–∏—Ç –º–µ–Ω—è –ì–≤–∏–¥–æ

			# –º–æ–¥—É–ª—å –≤—ã–≥—Ä—É–∑–∏–ª–∏. –∑–∞—á–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –µ—Å–ª–∏ –Ω–µ –∑–∞–ø–ª–∞—Ç—è—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω–æ?
			if not self in self.allmodules.modules:
				logger.fatal("AutoLesya unloaded. Breaking timer.")
				break

			# –µ—Å–ª–∏ –≤ –±–∞–Ω–µ —Å–∏–¥–∏–º, –∑–∞—á–µ–º –ø–æ–ø—É—Å—Ç—É —Ç—Ä–∞—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–Ω–∞,
			# –ª—É—á—à–µ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ø–∏–º –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è
			if self._temp_db["banned"]:
				await asyncio.sleep(self._temp_db["banned"].release_time - time() + 600)
				self._temp_db["banned"] = None

			# –±–ª–æ–∫–∏—Ä—É–µ–º –º—É—Ç–µ–∫—Å, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –Ω–∞—á–∞–ª —Ä–µ—à–∞—Ç—å –∫–∞–ø—á—É –≤–æ –≤—Ä–µ–º—è —Ç–æ–≥–æ –∫–∞–∫ —Ç–∞–π–º–µ—Ä
			# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è. –ï—Å–ª–∏ –≤ —ç—Ç–æ –≤—Ä–µ–º—è –º—É—Ç–µ–∫—Å –∫–∞–ø—á–∏ —É–∂–µ –∑–∞–Ω—è—Ç, —Ç–∞–π–º–µ—Ä —Ç–µ—Ä–ø–µ–ª–∏–≤–æ
			# –ø–æ—Å–∏–¥–∏—Ç, –∑–≤—ë–∑–¥—ã –ø–æ—Å—á–∏—Ç–∞–µ—Ç
			if True:#async with self._locks["captcha"]:

				now = time()

				if self._times.get("bot_lag") > now:
					await asyncio.sleep(10)
					continue

				if self._temp_db.get("captcha") != None:
					await self.brute_captcha()
					await asyncio.sleep(15)
					continue

				logger.info("Working")
				# –ø–æ–ø—Ä–æ—Å–∏–º –ø—Ä–æ—Ñ–∏–ª—å
				if not self.profile:
					logger.info("Requesting profile")
					await asyncio.sleep(5)
					asyncio.ensure_future(self.send_bot("–ü—Ä–æ—Ñ–∏–ª—å"))
					#await self._locks["profile_get"]
					await asyncio.sleep(5)
					continue

				if self._settings.get("clan_war"):
					upgrade = self._times.get("clan_war_upgrade")
					if now > upgrade and upgrade != 0:
						self._times["clan_war_upgrade"] = now + 300
						await self.send_bot("–ö–≤")
					elif now > self._times.get("clan_war"):
						self._times["clan_war"] = now + 600
						await self.send_bot("–ö–í")

				if self._settings.get("clan_heist") and now > self._times.get("clan_heist"):
					self._times["clan_heist"] = now + 600
					await self.send_bot("–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ")

				sleep = False  # –î–æ–ª–∂–µ–Ω –ª–∏ –±–æ—Ç —Å–µ–π—á–∞—Å "—Å–ø–∞—Ç—å"
				hour = int(strftime("%H"))
				for sleep_name in self.sleep_hours:
					hours = self.sleep_hours.get(sleep_name)
					if hour >= hours[0] and hour <= hours[1]:
						sleep = True

				if sleep:
					await asyncio.sleep(60)
					continue

				# —Ä–∞–±–æ—Ç–∞ –Ω–µ –≤–æ–ª–∫, –Ω–æ –ø–æ–ø—É –Ω–µ –º–æ–µ—Ç
				if self._settings.get("work") and now > self._times.get("work"):
					logger.info("Time to Work")
					self._times["work"] =  now + 30
					await self.send_bot("–†–∞–±–æ—Ç–∞—Ç—å")

				# –ë–æ–Ω—É—Å—ã —Ç–æ–∂–µ –Ω–µ –≤–æ–ª–∫, –∏ —Ç–æ–∂–µ –ø–æ–ø—É –Ω–µ –º–æ—é—Ç
				if self._settings.get("bonus"):
					if now > self._times.get("bonus"):
						logger.info("Getting bonus")
						self._times["bonus"] = now + 600
						await self.send_bot("–ë–æ–Ω—É—Å")
						await asyncio.sleep(5)
					profile_status = self.profile.status

					if (profile_status == LesyaAccountStatus.VIP or profile_status == LesyaAccountStatus.Premium or profile_status == LesyaAccountStatus.Deluxe) and now > self._times.get("vip_bonus"):
						logger.info("Getting vip bonus")
						self._times["vip_bonus"] = now + 600
						await self.send_bot("–í–∏–ø –±–æ–Ω—É—Å")
						await asyncio.sleep(5)

					if (profile_status == LesyaAccountStatus.Premium or profile_status == LesyaAccountStatus.Deluxe) and now > self._times.get("premium_bonus"):
						logger.info("Getting premium bonus")
						self._times["premium_bonus"] = now + 600
						await self.send_bot("–ü—Ä–µ–º–∏—É–º –±–æ–Ω—É—Å")
						await asyncio.sleep(5)

					if (profile_status == LesyaAccountStatus.Premium or profile_status == LesyaAccountStatus.Deluxe) and now > self._times.get("premium_money"):
						logger.info("Getting premium money")
						self._times["premium_money"] = now + 600
						await self.send_bot("–ü—Ä–µ–º–∏—É–º –≤–∞–ª—é—Ç–∞")
						await asyncio.sleep(5)

					if profile_status == LesyaAccountStatus.Deluxe and now > self._times.get("deluxe_bonus"):
						logger.info("Getting deluxe bonus")
						self._times["deluxe_bonus"] = now + 600
						await self.send_bot("–î–µ–ª—é–∫—Å –±–æ–Ω—É—Å")
						await asyncio.sleep(5)

					if profile_status == LesyaAccountStatus.Deluxe and now > self._times.get("deluxe_give"):
						logger.info("Getting deluxe money")
						self._times["deluxe_give"] = now + 600
						await self.send_bot("–ì–∏–≤ " + str(self.profile.uid) + " 5–∫–∫–∫–∫")
						await asyncio.sleep(5)

				# –ë–ª—è—Ç—å, –¥–∞ –∏ –ø–∏—Ç–æ–º—Ü—ã –Ω–µ –≤–æ–ª–∫
				if self._settings.get("pet_stimulator") and now > self._times.get("pet_stimulator"):
					self.set_time("pet_stimulator", now + 60 * 60 * 24)
					self.get_bitcoins()
					await self.send_bot("–ó–æ–æ—Ç–æ–≤–∞—Ä—ã 6")

				if self._settings.get("pet_food") and now > self._times.get("pet_food"):
					self.set_time("pet_food", now + 60 * 60 * 24)
					self.get_bitcoins()
					await self.send_bot("–ó–æ–æ—Ç–æ–≤–∞—Ä—ã 7")

				if self._settings.get("pet_cases") and now > self._times.get("pet_cases"):
					self.set_time("pet_cases", now + 60 * 60 * 24)
					self.get_bitcoins()
					await self.send_bot("–ó–æ–æ—Ç–æ–≤–∞—Ä—ã 8")

				# –ê–≤—Ç–æ–±–æ–π
				if self._settings.get("fight") and now > self._times.get("fight") \
						and not self.profile.additional_info.get("no_pets"):
					self._times["fight" ] = now + 30
					logger.info("Starting new battle")
					await self.send_bot("–ë–æ–π")

				# –ê–≤—Ç–æ–æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–æ–≤
				if self._settings.get("opencase") and now > self._times.get("opencase") \
						and self.profile.additional_info.get("opencase"):
					case = self.profile.additional_info.get("opencase")
					self.set_time("opencase", now + gen_time("opencase"))
					if self.profile.additional_info.get("opencase_limit"):
						await self.send_bot("–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å " + str(case))
					else:
						await self.send_bot("–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å " + str(case) + " 10")

				if self._settings.get("humanizer") and now > self._times.get("humanizer"):
					self.set_time("humanizer", now + gen_time("humanizer"))
					await self.send_phrase()

				# –ï—Å–ª–∏ –µ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥ –≥–æ—Ä–æ–¥–∞ - –º–µ—Ç–æ–¥ –ø–æ–¥–Ω—è—Ç–∏—è –¥–µ–Ω–µ–≥ –∏ –≤—ã–≤–æ–¥–∞ –≤ —Ç–æ–ø –∏ —Å–µ–±—è –∏ –∫–ª–∞–Ω–∞
				if self._settings.get("auto_trade") and now > self._times.get("trade") and not sleep:
					self.set_time("trade", now + 5)
					side = "–≤–≤–µ—Ä—Ö" if randint(0, 1) else "–≤–Ω–∏–∑"
					await self.send_bot("–¢—Ä–µ–π–¥ " + side + " –≤—Å–µ")

				if self._settings.get("auto_cup") and now > self._times.get("cup") and not sleep:
					self.set_time("cup", now + 5)
					side = str(randint(1, 3))
					await self.send_bot("–°—Ç–∞–∫–∞–Ω—á–∏–∫ " + side + " –≤—Å–µ")

				if self._settings.get("auto_casino") and now > self._times.get("casino") and not sleep:
					self.set_time("casino", now + 5)
					await self.send_bot("–ö–∞–∑–∏–Ω–æ –≤—Å–µ")

				if self._settings.get("progress") and now > self._times.get("progress") and not sleep:
					self.set_time("progress", now + 5)
					if self.profile.btcminer.count < 1000 and self.profile.balance > BITCOIN_FARM_PRICE:
						amount = floor(self.profile.balance / BITCOIN_FARM_PRICE)
						await self.send_bot("–§–µ—Ä–º—ã 3 " + str(amount))

					parsed_petshop = self.profile.additional_info.get("parsed_petshop")
					if parsed_petshop is None:
						await self.send_bot("–ó–æ–æ—Ç–æ–≤–∞—Ä—ã")
					elif parsed_petshop:
						for num in parsed_petshop:
							price = parsed_petshop.get(num)
							if self.profile.bitcoin_balance.get("bitcoin", 0) > price:
								await self.send_bot("–ó–æ–æ—Ç–æ–≤–∞—Ä—ã " + str(num))

				if self._settings.get("progress") and now > self._times.get("progress_collect") and not sleep:
					self.set_time("progress_collect", now + 10800)
					if self.profile.btcminer.count > 0:
						await self.send_bot("–§–µ—Ä–º–∞")

			await asyncio.sleep(5)  # –Ω–∞ –±–æ–∫–æ–≤—É—é

	async def send_phrase(self):
		phrase = gen_phrase()
		await self.send_bot(phrase)

	async def watcher(self, message):
		if not isinstance(message, types.Message):  # –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ—Å–æ–æ–±—â–µ–Ω–∏—è
			return
		if not message.text:  # –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
			return
		if message.from_id == self._me_id:  # –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ–±—è
			return
		chat_id = utils.get_chat_id(message)
		from_bot = chat_id == LESYA_CHATID
		if chat_id in [LESYA_CHATID, LOGCHANNEL_CHATID]:  # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –∏ –æ—Ç —á–∞—Ç–∞
			await self.process_message(message, from_bot)

	async def send_bot(self, text):
		global LESYA_LAG
		LESYA_LAG += 1
		if LESYA_LAG >= 10:
			LESYA_LAG = 0
			self._times["bot_lag"] = time() + 1800
		return await self._client.send_message(LESYA_CHATID, text)

	async def send_group(self, text):
		return await self._client.send_message(LOGCHANNEL_CHATID, text)

	def set_time(self, time_name, entry):
		self._times[time_name] = entry
		#self.db_set("time_" + time_name, entry)

	def db_set(self, key, value):
		self._db.set(__name__, key, value)

	def db_get(self, key, default=None):
		return self._db.get(__name__, key, default)

	def settings_set(self, name, var):
		self._settings[name] = var
		self.db_set(name, var)
